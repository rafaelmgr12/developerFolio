{"status":"ok","feed":{"url":"https://medium.com/feed/@rgribeiro","title":"Stories by Rafael Ribeiro on Medium","link":"https://medium.com/@rgribeiro?source=rss-303f8669abf9------2","author":"","description":"Stories by Rafael Ribeiro on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*kENQbV6PMDnIwa823jhf-Q.png"},"items":[{"title":"Concorr\u00eancia em Go","pubDate":"2023-06-01 21:02:16","link":"https://medium.com/@rgribeiro/concorr%C3%AAncia-em-go-85b6a127b12f?source=rss-303f8669abf9------2","guid":"https://medium.com/p/85b6a127b12f","author":"Rafael Ribeiro","thumbnail":"https://cdn-images-1.medium.com/max/740/1*rxDdNJHiz1R38J_JEz23Zw.jpeg","description":"\n<h4>Como as goroutines e channels tornam o Go poderoso.</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/740/1*rxDdNJHiz1R38J_JEz23Zw.jpeg\"></figure><p>Go \u00e9 uma linguagem de programa\u00e7\u00e3o desenvolvida no in\u00edcio dos anos 2000 pelos engenheiros da Google, Robert Griesemer, Rob Pike e Ken Thompson. O objetivo principal do desenvolvimento do Go era criar uma linguagem de programa\u00e7\u00e3o moderna, eficiente e f\u00e1cil de usar, adequada para o desenvolvimento de software escal\u00e1vel e de alto desempenho. O Go foi inspirado por linguagens como C, C ++, Java e C #. Ela mant\u00e9m a sintaxe do C e, ao mesmo tempo, incorpora recursos de linguagens din\u00e2micas, como Python e\u00a0Ruby.</p>\n<p>Uma das grandes vantagens do Go \u00e9 o seu suporte nativo a concorr\u00eancia e paralelismo. A concorr\u00eancia \u00e9 obtida atrav\u00e9s do conceito de Goroutines, que segundo a documenta\u00e7\u00e3o oficial \u00e9 \u201cuma thread leve gerenciada pelo tempo de execu\u00e7\u00e3o do Go\u201d. Discutiremos com mais detalhes como isso pode ser\u00a0feito.</p>\n<p>Al\u00e9m da Goroutines, temos as channels (\u201ccanais\u201d) usados para a comunica\u00e7\u00e3o e sincroniza\u00e7\u00e3o entre goroutines. Os canais permitem que as goroutines troquem dados de maneira segura e coordenada, evitando condi\u00e7\u00f5es de corrida e problemas de concorr\u00eancia.</p>\n<p>Neste artigo, exploraremos dois dos principais pilares da concorr\u00eancia no Go: as goroutines e os channels. As goroutines s\u00e3o respons\u00e1veis por permitir a execu\u00e7\u00e3o ass\u00edncrona e leve de tarefas, enquanto os channels possibilitam a comunica\u00e7\u00e3o e a sincroniza\u00e7\u00e3o entre essas tarefas concorrentes.</p>\n<p>Descobriremos como as goroutines podem ser criadas e gerenciadas eficientemente, garantindo um aproveitamento m\u00e1ximo dos recursos do processador. Al\u00e9m disso, veremos como os channels facilitam a troca segura de dados entre as goroutines, evitando problemas comuns, como condi\u00e7\u00f5es de\u00a0corrida.</p>\n<h3>Goroutines: Execu\u00e7\u00e3o leve e ass\u00edncrona</h3>\n<p>Antes de abordarmos o assunto principal deste artigo, \u00e9 importante entendermos brevemente o que \u00e9 concorr\u00eancia e paralelismo, bem como as diferen\u00e7as entre\u00a0eles.</p>\n<ul>\n<li>\n<strong><em>Concorr\u00eancia</em></strong><em> refere-se \u00e0 execu\u00e7\u00e3o aparentemente simult\u00e2nea de m\u00faltiplas tarefas em um mesmo ambiente. Isso permite que diferentes partes de um programa sejam executadas em paralelo, compartilhando recursos e melhorando a efici\u00eancia do\u00a0sistema.</em>\n</li>\n<li>\n<strong><em>Paralelismo </em></strong><em>envolve a execu\u00e7\u00e3o real simult\u00e2nea de tarefas em recursos de processamento distintos. Ao dividir uma tarefa em partes menores, chamadas de threads ou processos, essas partes podem ser executadas independentemente em paralelo, aproveitando ao m\u00e1ximo os recursos dispon\u00edveis.</em>\n</li>\n</ul>\n<p>Quando lidamos com tarefas concorrentes, a complexidade aumenta, pois estamos trabalhando com mem\u00f3ria compartilhada, onde diferentes threads podem manipul\u00e1-la de maneiras imprevis\u00edveis, resultando em erros n\u00e3o reproduz\u00edveis e em resultados aleat\u00f3rios, conhecidos como condi\u00e7\u00f5es de\u00a0corrida.</p>\n<p>A solu\u00e7\u00e3o para esse problema reside em sincronizar as diferentes threads e bloquear os dados para que apenas uma thread possa modific\u00e1-los de cada vez. A linguagem Go possui recursos para bloqueio em sua biblioteca padr\u00e3o, por meio do pacote \u201csync\u201d, quando s\u00e3o necess\u00e1rios bloqueios em c\u00f3digo de baixo n\u00edvel. No entanto, experi\u00eancias anteriores em engenharia de software mostraram que esse modelo leva a uma programa\u00e7\u00e3o complexa e propensa a erros, al\u00e9m de diminuir o desempenho. Portanto, esse modelo cl\u00e1ssico n\u00e3o \u00e9 adequado para a programa\u00e7\u00e3o moderna em multicore e multiprocessadores, onde o modelo \u201cthread-per-connection\u201d n\u00e3o \u00e9 eficiente o suficiente.</p>\n<p>O Go adota um paradigma diferente, mais adequado para muitos casos, conhecido como Processos Sequenciais Comunicantes (CSP, inventado por C.A.R. Hoare) ou o modelo de passagem de mensagens, aplicado em outras linguagens, como\u00a0Erlang.</p>\n<p>As partes de um aplicativo executadas s\u00e3o simultaneamente chamadas de goroutines em Go. Elas s\u00e3o essencialmente computa\u00e7\u00f5es executadas em simult\u00e2neo. N\u00e3o h\u00e1 uma correspond\u00eancia direta entre uma goroutine e uma thread do sistema operacional: uma goroutine \u00e9 mapeada para (ou multiplexada por) uma ou mais threads, conforme a disponibilidade. O escalonador de goroutines do Go cuida dessa execu\u00e7\u00e3o.</p>\n<p>As goroutines s\u00e3o executadas no mesmo espa\u00e7o de endere\u00e7os, o que significa que o acesso \u00e0 mem\u00f3ria compartilhada deve ser sincronizado. Embora seja poss\u00edvel usar o pacote sync para sincroniza\u00e7\u00e3o, essa abordagem \u00e9 altamente desencorajada. Em vez disso, o Go utiliza \u201cchannels\u201d para sincronizar goroutines.</p>\n<p>Channels ser\u00e3o discutidos com mais detalhes na pr\u00f3xima\u00a0se\u00e7\u00e3o.</p>\n<p>Dessa forma, no Go, as goroutines s\u00e3o a base da concorr\u00eancia e do paralelismo. Elas permitem a execu\u00e7\u00e3o de tarefas de forma ass\u00edncrona e leve, garantindo um alto grau de efici\u00eancia e escalabilidade. Nesta se\u00e7\u00e3o, exploraremos em detalhes o conceito e o funcionamento das goroutines.</p>\n<h4>O que s\u00e3o Goroutines</h4>\n<p>As goroutines s\u00e3o unidades de execu\u00e7\u00e3o leves gerenciadas pelo runtime do Go. Ao contr\u00e1rio das threads tradicionais, elas s\u00e3o extremamente leves, permitindo a cria\u00e7\u00e3o de centenas, milhares e at\u00e9 milh\u00f5es delas em um \u00fanico programa.</p>\n<p>As goroutines s\u00e3o executadas em um \u00fanico thread chamado \u201cm\u00e1quina de execu\u00e7\u00e3o de goroutines\u201d (<em>goroutine scheduler</em>). Essa m\u00e1quina de execu\u00e7\u00e3o \u00e9 respons\u00e1vel por escalonar e distribuir as goroutines nos n\u00facleos de processamento dispon\u00edveis, garantindo uma execu\u00e7\u00e3o eficiente e concorrente.</p>\n<p>Comparadas \u00e0s threads tradicionais, as goroutines apresentam v\u00e1rias vantagens significativas. Por serem leves em termos de consumo de mem\u00f3ria, as goroutines podem ser criadas em grande escala sem sobrecarregar o sistema. Al\u00e9m disso, o custo de cria\u00e7\u00e3o e destrui\u00e7\u00e3o de goroutines \u00e9 muito baixo, permitindo uma abordagem mais flex\u00edvel para a concorr\u00eancia.</p>\n<p>Uma goroutine \u00e9 implementada como uma fun\u00e7\u00e3o ou m\u00e9todo (tamb\u00e9m pode ser uma fun\u00e7\u00e3o an\u00f4nima ou lambda) e \u00e9 chamada (invocada) com a palavra-chave \u201cgo\u201d. Isso inicia a execu\u00e7\u00e3o da fun\u00e7\u00e3o de forma concorrente com o c\u00e1lculo atual, mas no mesmo espa\u00e7o de endere\u00e7o e com sua pr\u00f3pria pilha. Por\u00a0exemplo:</p>\n<pre>func main() {<br>    go minhaFuncao() // Criando uma goroutine<br>    // Restante do c\u00f3digo principal<br>}<br>func minhaFuncao() {<br>    // L\u00f3gica da fun\u00e7\u00e3o<br>}<br></pre>\n<p>A pilha de uma goroutine \u00e9 gerenciada de maneira eficiente, crescendo e diminuindo conforme o necess\u00e1rio. N\u00e3o h\u00e1 possibilidade de estouro de pilha e o programador n\u00e3o precisa se preocupar com o tamanho da pilha. Quando a goroutine termina, ela sai silenciosamente, o que significa que nada \u00e9 retornado para a fun\u00e7\u00e3o que a iniciou. A fun\u00e7\u00e3o main(), que todo programa Go deve ter, tamb\u00e9m pode ser vista como uma goroutine, embora n\u00e3o seja iniciada com go. As goroutines podem ser executadas durante a inicializa\u00e7\u00e3o do programa (na fun\u00e7\u00e3o\u00a0init()).</p>\n<p>Uma goroutine em execu\u00e7\u00e3o pode interromper a si mesma chamando runtime.Goexit(), embora isso raramente seja necess\u00e1rio. Quando uma goroutine \u00e9 muito intensiva em processamento, voc\u00ea pode chamar periodicamente runtime.Gosched() em seus loops de c\u00e1lculo. Isso cede o processador, permitindo que outras goroutines sejam executadas. Isso n\u00e3o suspende a goroutine atual, ent\u00e3o a execu\u00e7\u00e3o \u00e9 retomada automaticamente. Ao usar Gosched(), os c\u00e1lculos s\u00e3o distribu\u00eddos de forma mais equilibrada e a comunica\u00e7\u00e3o n\u00e3o fica prejudicada.</p>\n<h3>Channels: Comunica\u00e7\u00e3o e sincroniza\u00e7\u00e3o entre goroutines</h3>\n<p>Para podermos tirar o m\u00e1ximo proveito das goroutines, \u00e9 preciso que elas se comuniquem, j\u00e1 que as goroutines n\u00e3o se comunicam por padr\u00e3o. Isso pode ser feito por meio do compartilhamento de vari\u00e1veis, mas isso \u00e9 extremamente complexo, j\u00e1 que essa forma de trabalhar apresenta todas as dificuldades com mem\u00f3ria compartilhada em multithreading. Para isso, o <strong>Go</strong> introduz o que chamamos de <em>channel</em>, que seja canal (condu\u00edte) que conecta canais concorrentes para ser poss\u00edvel enviar dados e lidar com a comunica\u00e7\u00e3o entre as goroutines, dessa forma evitamos os problemas da mem\u00f3ria compartilhada. J\u00e1 que o ato de comunica\u00e7\u00e3o mediante um canal garante a sincroniza\u00e7\u00e3o; n\u00e3o h\u00e1 necessidade de sincroniza\u00e7\u00e3o expl\u00edcita por meio de bloqueio de\u00a0nada.</p>\n<p>Os dados s\u00e3o transmitidos nos canais: <em>apenas uma goroutine tem acesso a um item de dados a qualquer momento: portanto, corridas de dados n\u00e3o podem ocorrer, por design</em>. A propriedade dos dados (ou seja, a capacidade de l\u00ea-los e escrev\u00ea-los) \u00e9 repassada.</p>\n<p>A forma gen\u00e9rica de se declarar um canal em go\u00a0\u00e9</p>\n<pre>var identifier chan datatype</pre>\n<p>Ao declarar um canal, seu valor inicial sera\u00a0nil.</p>\n<p>Um canal s\u00f3 pode transmitir dados de apenas um tipo, por exemplo, chan int ou chan string, mas um canal pode ser feito para qualquer tipo e, al\u00e9m disso, pode ser tamb\u00e9m um tipo personalizado e interfaces vazias\u00a0{}.</p>\n<p>Um canal \u00e9 uma <em>fila de mensagens tipadas</em>: dados podem ser transmitidos por meio dele. Trata-se de uma estrutura FIFO(First in First Out), o que significa que preserva a ordem dos itens enviados para\u00a0ele.</p>\n<p>Al\u00e9m disso, um canal \u00e9 uma refer\u00eancia, o que significa que devemos usar a fun\u00e7\u00e3o make() para alocar mem\u00f3ria para ele. Aqui est\u00e1 um exemplo de uma declara\u00e7\u00e3o de canal chamado ch1 para strings, seguido pela sua instancia\u00e7\u00e3o:</p>\n<pre>var ch1 chan string<br>ch1 = make(chan string)</pre>\n<p>Ou se estiver com pressa podemos escrever:</p>\n<pre>ch1 := make(chan string)</pre>\n<p>Os canais s\u00e3o objetos de primeira classe. Eles podem ser armazenados em vari\u00e1veis, passados como argumentos para fun\u00e7\u00f5es, retornados de fun\u00e7\u00f5es e enviados por canais. Al\u00e9m disso, eles s\u00e3o digitados, permitindo que o sistema de tipos detecte erros de programa\u00e7\u00e3o, como tentar enviar um ponteiro por um canal de inteiros.</p>\n<h3>Fechando um\u00a0canal</h3>\n<p>Uma vez que come\u00e7amos a usar canais, \u00e9 uma boa pr\u00e1tica fechar o mesmo. Portanto, para fechar usamos o seguinte\u00a0comando.</p>\n<pre>close(ch)</pre>\n<h3>Operador de Comunica\u00e7\u00e3o</h3>\n<p>Vamos agora olhar como funciona o operador de comunica\u00e7\u00e3o entre canais dentro do Go. Este tipo de operador representa transmiss\u00e3o de dados e de maneira intuitiva, ou seja, a informa\u00e7\u00e3o flui na dire\u00e7\u00e3o da\u00a0seta.</p>\n<h4>Para um canal(enviando dados)</h4>\n<p>A opera\u00e7\u00e3o ch&lt;-int1 mostra que a vari\u00e1vel int1 \u00e9 enviada pelo canal ch (operador bin\u00e1rio, infixo, que significa enviar).</p>\n<h4>De uma canal (recp\u00e7\u00e3o)</h4>\n<p>A opera\u00e7\u00e3o int2 = &lt;- ch mostra que a vari\u00e1vel int2 recebe dados (obt\u00e9m um novo valor) do canal ch (operador de prefixo un\u00e1rio, prefixo significa receber). Isso sup\u00f5e que int2 j\u00e1 esteja declarado; caso contr\u00e1rio, pode ser escrito como: int2\u00a0:= &lt;- ch. Outra forma &lt;- ch pode ser usada para obter o (pr\u00f3ximo) valor do canal. Esse valor \u00e9 efetivamente descartado, mas pode ser testado. \u00c9 por isso que o seguinte\u00a0c\u00f3digo.</p>\n<pre>if &lt;-ch != 1000{<br>  ...<br>}</pre>\n<p>O mesmo operador &lt;- \u00e9 usado para enviar e receber, mas Go descobre o que fazer dependendo dos operandos. Embora n\u00e3o seja necess\u00e1rio, para facilitar a leitura, o nome do canal geralmente come\u00e7a com ch ou cont\u00e9m\u00a0chan.</p>\n<p><em>As opera\u00e7\u00f5es </em><em>enviar e </em><em>receber do canal s\u00e3o at\u00f4micas, o que significa que elas sempre s\u00e3o conclu\u00eddas sem interrup\u00e7\u00e3o.</em></p>\n<p>A utiliza\u00e7\u00e3o do operador de comunica\u00e7\u00e3o \u00e9 ilustrada no seguinte\u00a0exemplo:</p>\n<pre>package main<br>import (<br>  \"fmt\"<br>  \"time\"<br>)<br>func main() {<br>  ch := make(chan string)<br>  go sendData(ch) // chamando goroutine para enviar os dados<br>  go getData(ch)  // chamando goroutine para receber os dados<br>  time.Sleep(1e9)<br>}<br>func sendData(ch chan string) { // enviando dados para o canal ch<br>  ch &lt;- \"Washington\"<br>  ch &lt;- \"Tripoli\"<br>  ch &lt;- \"London\"<br>  ch &lt;- \"Beijing\"<br>  ch &lt;- \"Tokyo\"<br>}<br>func getData(ch chan string) {<br>  var input string<br>  for {<br>    input = &lt;-ch // recebendo dados enviados para o canal ch<br>    fmt.Printf(\"%s \", input)<br>  }<br>  close(ch) // fecha o canal<br>}</pre>\n<p>No bloco principal main() do c\u00f3digo, presente na <strong>linha 8</strong>, \u00e9 criado um canal chamado ch para troca de mensagens do tipo string. Em seguida, duas goroutines s\u00e3o iniciadas: sendData() (na <strong>linha 9</strong>) envia <strong>5</strong> strings atrav\u00e9s do canal ch (veja a implementa\u00e7\u00e3o da <strong>linha 14</strong> at\u00e9 a <strong>linha 20</strong>), e getData() (na <strong>linha 10</strong>) as recebe uma a uma na vari\u00e1vel input (na <strong>linha 25</strong>) e imprime o conte\u00fado recebido (na <strong>linha 26</strong>). Para que duas goroutines possam se comunicar, \u00e9 necess\u00e1rio passar o mesmo canal como par\u00e2metro para ambas. Experimente o que acontece ao comentar a linha time.Sleep(1e9). <em>Lembre-se tamb\u00e9m de comentar a importa\u00e7\u00e3o do pacote </em><em>time, caso contr\u00e1rio o c\u00f3digo n\u00e3o ir\u00e1 compilar.</em></p>\n<p>\u00c9 importante ressaltar a necessidade de sincroniza\u00e7\u00e3o entre as goroutines:</p>\n<ul>\n<li>A fun\u00e7\u00e3o main() aguarda 1 segundo para permitir que ambas as goroutines sejam conclu\u00eddas. Caso contr\u00e1rio, sendData() n\u00e3o ter\u00e1 oportunidade de produzir sua\u00a0sa\u00edda.</li>\n<li>getData() trabalha com um loop infinito, que \u00e9 interrompido somente quando sendData() termina e o canal ch est\u00e1\u00a0vazio.</li>\n<li>Caso sejam removidas uma ou todas as palavras-chave go, o programa deixar\u00e1 de funcionar e o tempo de execu\u00e7\u00e3o do Go lan\u00e7ar\u00e1 um\u00a0erro:</li>\n<li>--- Error run &lt;path&gt; with code Crashed Fatal error: all goroutines are asleep - deadlock!</li>\n</ul>\n<p>Essa ocorr\u00eancia se d\u00e1 pelo fato de o tempo de execu\u00e7\u00e3o do Go ser capaz de detectar que todas as goroutines (ou talvez apenas uma, neste caso) est\u00e3o aguardando por algo (seja escrever em um canal ou ser capaz de ler de um canal), impedindo assim o avan\u00e7o do programa. Trata-se de uma forma de impasse (deadlock) que o tempo de execu\u00e7\u00e3o \u00e9 capaz de identificar.</p>\n<blockquote><em>Observa\u00e7\u00e3o: Evite utilizar declara\u00e7\u00f5es de impress\u00e3o para indicar a ordem de envio e recebimento em um canal. Essa abordagem pode gerar resultados fora de ordem devido ao atraso entre a declara\u00e7\u00e3o de impress\u00e3o e a efetiva\u00e7\u00e3o do envio e recebimento pelo\u00a0canal.</em></blockquote>\n<h3>Em resumo</h3>\n<p>As goroutines s\u00e3o unidades leves de execu\u00e7\u00e3o gerenciadas pelo runtime do Go. Elas permitem que tarefas sejam executadas de forma ass\u00edncrona e concorrente, aproveitando ao m\u00e1ximo os recursos do processador. A cria\u00e7\u00e3o e destrui\u00e7\u00e3o de goroutines s\u00e3o de baixo custo, o que permite uma abordagem flex\u00edvel para a concorr\u00eancia.</p>\n<p>Para que as goroutines se comuniquem e sincronizem, o Go utiliza os channels. Os channels s\u00e3o canais de comunica\u00e7\u00e3o e sincroniza\u00e7\u00e3o entre as goroutines, permitindo a troca segura de dados. Eles garantem que apenas uma goroutine tenha acesso aos dados em um determinado momento, evitando condi\u00e7\u00f5es de corrida e problemas de concorr\u00eancia.</p>\n<p>Em resumo, o Go se destaca como uma linguagem de programa\u00e7\u00e3o moderna, eficiente e f\u00e1cil de usar, especialmente no contexto da concorr\u00eancia. Com suas goroutines e channels, o Go fornece um modelo de programa\u00e7\u00e3o concorrente e paralela poderoso, permitindo que os desenvolvedores aproveitem ao m\u00e1ximo os recursos do sistema e criem software de alta performance.</p>\n<h3>Referencias</h3>\n<ul>\n<li><a href=\"https://a.co/d/afh6i4x\">A Linguagem de Programa\u00e7\u00e3o Go</a></li>\n<li><a href=\"https://a.co/d/14Jq9fX\">The Way To\u00a0Go</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=85b6a127b12f\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h4>Como as goroutines e channels tornam o Go poderoso.</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/740/1*rxDdNJHiz1R38J_JEz23Zw.jpeg\"></figure><p>Go \u00e9 uma linguagem de programa\u00e7\u00e3o desenvolvida no in\u00edcio dos anos 2000 pelos engenheiros da Google, Robert Griesemer, Rob Pike e Ken Thompson. O objetivo principal do desenvolvimento do Go era criar uma linguagem de programa\u00e7\u00e3o moderna, eficiente e f\u00e1cil de usar, adequada para o desenvolvimento de software escal\u00e1vel e de alto desempenho. O Go foi inspirado por linguagens como C, C ++, Java e C #. Ela mant\u00e9m a sintaxe do C e, ao mesmo tempo, incorpora recursos de linguagens din\u00e2micas, como Python e\u00a0Ruby.</p>\n<p>Uma das grandes vantagens do Go \u00e9 o seu suporte nativo a concorr\u00eancia e paralelismo. A concorr\u00eancia \u00e9 obtida atrav\u00e9s do conceito de Goroutines, que segundo a documenta\u00e7\u00e3o oficial \u00e9 \u201cuma thread leve gerenciada pelo tempo de execu\u00e7\u00e3o do Go\u201d. Discutiremos com mais detalhes como isso pode ser\u00a0feito.</p>\n<p>Al\u00e9m da Goroutines, temos as channels (\u201ccanais\u201d) usados para a comunica\u00e7\u00e3o e sincroniza\u00e7\u00e3o entre goroutines. Os canais permitem que as goroutines troquem dados de maneira segura e coordenada, evitando condi\u00e7\u00f5es de corrida e problemas de concorr\u00eancia.</p>\n<p>Neste artigo, exploraremos dois dos principais pilares da concorr\u00eancia no Go: as goroutines e os channels. As goroutines s\u00e3o respons\u00e1veis por permitir a execu\u00e7\u00e3o ass\u00edncrona e leve de tarefas, enquanto os channels possibilitam a comunica\u00e7\u00e3o e a sincroniza\u00e7\u00e3o entre essas tarefas concorrentes.</p>\n<p>Descobriremos como as goroutines podem ser criadas e gerenciadas eficientemente, garantindo um aproveitamento m\u00e1ximo dos recursos do processador. Al\u00e9m disso, veremos como os channels facilitam a troca segura de dados entre as goroutines, evitando problemas comuns, como condi\u00e7\u00f5es de\u00a0corrida.</p>\n<h3>Goroutines: Execu\u00e7\u00e3o leve e ass\u00edncrona</h3>\n<p>Antes de abordarmos o assunto principal deste artigo, \u00e9 importante entendermos brevemente o que \u00e9 concorr\u00eancia e paralelismo, bem como as diferen\u00e7as entre\u00a0eles.</p>\n<ul>\n<li>\n<strong><em>Concorr\u00eancia</em></strong><em> refere-se \u00e0 execu\u00e7\u00e3o aparentemente simult\u00e2nea de m\u00faltiplas tarefas em um mesmo ambiente. Isso permite que diferentes partes de um programa sejam executadas em paralelo, compartilhando recursos e melhorando a efici\u00eancia do\u00a0sistema.</em>\n</li>\n<li>\n<strong><em>Paralelismo </em></strong><em>envolve a execu\u00e7\u00e3o real simult\u00e2nea de tarefas em recursos de processamento distintos. Ao dividir uma tarefa em partes menores, chamadas de threads ou processos, essas partes podem ser executadas independentemente em paralelo, aproveitando ao m\u00e1ximo os recursos dispon\u00edveis.</em>\n</li>\n</ul>\n<p>Quando lidamos com tarefas concorrentes, a complexidade aumenta, pois estamos trabalhando com mem\u00f3ria compartilhada, onde diferentes threads podem manipul\u00e1-la de maneiras imprevis\u00edveis, resultando em erros n\u00e3o reproduz\u00edveis e em resultados aleat\u00f3rios, conhecidos como condi\u00e7\u00f5es de\u00a0corrida.</p>\n<p>A solu\u00e7\u00e3o para esse problema reside em sincronizar as diferentes threads e bloquear os dados para que apenas uma thread possa modific\u00e1-los de cada vez. A linguagem Go possui recursos para bloqueio em sua biblioteca padr\u00e3o, por meio do pacote \u201csync\u201d, quando s\u00e3o necess\u00e1rios bloqueios em c\u00f3digo de baixo n\u00edvel. No entanto, experi\u00eancias anteriores em engenharia de software mostraram que esse modelo leva a uma programa\u00e7\u00e3o complexa e propensa a erros, al\u00e9m de diminuir o desempenho. Portanto, esse modelo cl\u00e1ssico n\u00e3o \u00e9 adequado para a programa\u00e7\u00e3o moderna em multicore e multiprocessadores, onde o modelo \u201cthread-per-connection\u201d n\u00e3o \u00e9 eficiente o suficiente.</p>\n<p>O Go adota um paradigma diferente, mais adequado para muitos casos, conhecido como Processos Sequenciais Comunicantes (CSP, inventado por C.A.R. Hoare) ou o modelo de passagem de mensagens, aplicado em outras linguagens, como\u00a0Erlang.</p>\n<p>As partes de um aplicativo executadas s\u00e3o simultaneamente chamadas de goroutines em Go. Elas s\u00e3o essencialmente computa\u00e7\u00f5es executadas em simult\u00e2neo. N\u00e3o h\u00e1 uma correspond\u00eancia direta entre uma goroutine e uma thread do sistema operacional: uma goroutine \u00e9 mapeada para (ou multiplexada por) uma ou mais threads, conforme a disponibilidade. O escalonador de goroutines do Go cuida dessa execu\u00e7\u00e3o.</p>\n<p>As goroutines s\u00e3o executadas no mesmo espa\u00e7o de endere\u00e7os, o que significa que o acesso \u00e0 mem\u00f3ria compartilhada deve ser sincronizado. Embora seja poss\u00edvel usar o pacote sync para sincroniza\u00e7\u00e3o, essa abordagem \u00e9 altamente desencorajada. Em vez disso, o Go utiliza \u201cchannels\u201d para sincronizar goroutines.</p>\n<p>Channels ser\u00e3o discutidos com mais detalhes na pr\u00f3xima\u00a0se\u00e7\u00e3o.</p>\n<p>Dessa forma, no Go, as goroutines s\u00e3o a base da concorr\u00eancia e do paralelismo. Elas permitem a execu\u00e7\u00e3o de tarefas de forma ass\u00edncrona e leve, garantindo um alto grau de efici\u00eancia e escalabilidade. Nesta se\u00e7\u00e3o, exploraremos em detalhes o conceito e o funcionamento das goroutines.</p>\n<h4>O que s\u00e3o Goroutines</h4>\n<p>As goroutines s\u00e3o unidades de execu\u00e7\u00e3o leves gerenciadas pelo runtime do Go. Ao contr\u00e1rio das threads tradicionais, elas s\u00e3o extremamente leves, permitindo a cria\u00e7\u00e3o de centenas, milhares e at\u00e9 milh\u00f5es delas em um \u00fanico programa.</p>\n<p>As goroutines s\u00e3o executadas em um \u00fanico thread chamado \u201cm\u00e1quina de execu\u00e7\u00e3o de goroutines\u201d (<em>goroutine scheduler</em>). Essa m\u00e1quina de execu\u00e7\u00e3o \u00e9 respons\u00e1vel por escalonar e distribuir as goroutines nos n\u00facleos de processamento dispon\u00edveis, garantindo uma execu\u00e7\u00e3o eficiente e concorrente.</p>\n<p>Comparadas \u00e0s threads tradicionais, as goroutines apresentam v\u00e1rias vantagens significativas. Por serem leves em termos de consumo de mem\u00f3ria, as goroutines podem ser criadas em grande escala sem sobrecarregar o sistema. Al\u00e9m disso, o custo de cria\u00e7\u00e3o e destrui\u00e7\u00e3o de goroutines \u00e9 muito baixo, permitindo uma abordagem mais flex\u00edvel para a concorr\u00eancia.</p>\n<p>Uma goroutine \u00e9 implementada como uma fun\u00e7\u00e3o ou m\u00e9todo (tamb\u00e9m pode ser uma fun\u00e7\u00e3o an\u00f4nima ou lambda) e \u00e9 chamada (invocada) com a palavra-chave \u201cgo\u201d. Isso inicia a execu\u00e7\u00e3o da fun\u00e7\u00e3o de forma concorrente com o c\u00e1lculo atual, mas no mesmo espa\u00e7o de endere\u00e7o e com sua pr\u00f3pria pilha. Por\u00a0exemplo:</p>\n<pre>func main() {<br>    go minhaFuncao() // Criando uma goroutine<br>    // Restante do c\u00f3digo principal<br>}<br>func minhaFuncao() {<br>    // L\u00f3gica da fun\u00e7\u00e3o<br>}<br></pre>\n<p>A pilha de uma goroutine \u00e9 gerenciada de maneira eficiente, crescendo e diminuindo conforme o necess\u00e1rio. N\u00e3o h\u00e1 possibilidade de estouro de pilha e o programador n\u00e3o precisa se preocupar com o tamanho da pilha. Quando a goroutine termina, ela sai silenciosamente, o que significa que nada \u00e9 retornado para a fun\u00e7\u00e3o que a iniciou. A fun\u00e7\u00e3o main(), que todo programa Go deve ter, tamb\u00e9m pode ser vista como uma goroutine, embora n\u00e3o seja iniciada com go. As goroutines podem ser executadas durante a inicializa\u00e7\u00e3o do programa (na fun\u00e7\u00e3o\u00a0init()).</p>\n<p>Uma goroutine em execu\u00e7\u00e3o pode interromper a si mesma chamando runtime.Goexit(), embora isso raramente seja necess\u00e1rio. Quando uma goroutine \u00e9 muito intensiva em processamento, voc\u00ea pode chamar periodicamente runtime.Gosched() em seus loops de c\u00e1lculo. Isso cede o processador, permitindo que outras goroutines sejam executadas. Isso n\u00e3o suspende a goroutine atual, ent\u00e3o a execu\u00e7\u00e3o \u00e9 retomada automaticamente. Ao usar Gosched(), os c\u00e1lculos s\u00e3o distribu\u00eddos de forma mais equilibrada e a comunica\u00e7\u00e3o n\u00e3o fica prejudicada.</p>\n<h3>Channels: Comunica\u00e7\u00e3o e sincroniza\u00e7\u00e3o entre goroutines</h3>\n<p>Para podermos tirar o m\u00e1ximo proveito das goroutines, \u00e9 preciso que elas se comuniquem, j\u00e1 que as goroutines n\u00e3o se comunicam por padr\u00e3o. Isso pode ser feito por meio do compartilhamento de vari\u00e1veis, mas isso \u00e9 extremamente complexo, j\u00e1 que essa forma de trabalhar apresenta todas as dificuldades com mem\u00f3ria compartilhada em multithreading. Para isso, o <strong>Go</strong> introduz o que chamamos de <em>channel</em>, que seja canal (condu\u00edte) que conecta canais concorrentes para ser poss\u00edvel enviar dados e lidar com a comunica\u00e7\u00e3o entre as goroutines, dessa forma evitamos os problemas da mem\u00f3ria compartilhada. J\u00e1 que o ato de comunica\u00e7\u00e3o mediante um canal garante a sincroniza\u00e7\u00e3o; n\u00e3o h\u00e1 necessidade de sincroniza\u00e7\u00e3o expl\u00edcita por meio de bloqueio de\u00a0nada.</p>\n<p>Os dados s\u00e3o transmitidos nos canais: <em>apenas uma goroutine tem acesso a um item de dados a qualquer momento: portanto, corridas de dados n\u00e3o podem ocorrer, por design</em>. A propriedade dos dados (ou seja, a capacidade de l\u00ea-los e escrev\u00ea-los) \u00e9 repassada.</p>\n<p>A forma gen\u00e9rica de se declarar um canal em go\u00a0\u00e9</p>\n<pre>var identifier chan datatype</pre>\n<p>Ao declarar um canal, seu valor inicial sera\u00a0nil.</p>\n<p>Um canal s\u00f3 pode transmitir dados de apenas um tipo, por exemplo, chan int ou chan string, mas um canal pode ser feito para qualquer tipo e, al\u00e9m disso, pode ser tamb\u00e9m um tipo personalizado e interfaces vazias\u00a0{}.</p>\n<p>Um canal \u00e9 uma <em>fila de mensagens tipadas</em>: dados podem ser transmitidos por meio dele. Trata-se de uma estrutura FIFO(First in First Out), o que significa que preserva a ordem dos itens enviados para\u00a0ele.</p>\n<p>Al\u00e9m disso, um canal \u00e9 uma refer\u00eancia, o que significa que devemos usar a fun\u00e7\u00e3o make() para alocar mem\u00f3ria para ele. Aqui est\u00e1 um exemplo de uma declara\u00e7\u00e3o de canal chamado ch1 para strings, seguido pela sua instancia\u00e7\u00e3o:</p>\n<pre>var ch1 chan string<br>ch1 = make(chan string)</pre>\n<p>Ou se estiver com pressa podemos escrever:</p>\n<pre>ch1 := make(chan string)</pre>\n<p>Os canais s\u00e3o objetos de primeira classe. Eles podem ser armazenados em vari\u00e1veis, passados como argumentos para fun\u00e7\u00f5es, retornados de fun\u00e7\u00f5es e enviados por canais. Al\u00e9m disso, eles s\u00e3o digitados, permitindo que o sistema de tipos detecte erros de programa\u00e7\u00e3o, como tentar enviar um ponteiro por um canal de inteiros.</p>\n<h3>Fechando um\u00a0canal</h3>\n<p>Uma vez que come\u00e7amos a usar canais, \u00e9 uma boa pr\u00e1tica fechar o mesmo. Portanto, para fechar usamos o seguinte\u00a0comando.</p>\n<pre>close(ch)</pre>\n<h3>Operador de Comunica\u00e7\u00e3o</h3>\n<p>Vamos agora olhar como funciona o operador de comunica\u00e7\u00e3o entre canais dentro do Go. Este tipo de operador representa transmiss\u00e3o de dados e de maneira intuitiva, ou seja, a informa\u00e7\u00e3o flui na dire\u00e7\u00e3o da\u00a0seta.</p>\n<h4>Para um canal(enviando dados)</h4>\n<p>A opera\u00e7\u00e3o ch&lt;-int1 mostra que a vari\u00e1vel int1 \u00e9 enviada pelo canal ch (operador bin\u00e1rio, infixo, que significa enviar).</p>\n<h4>De uma canal (recp\u00e7\u00e3o)</h4>\n<p>A opera\u00e7\u00e3o int2 = &lt;- ch mostra que a vari\u00e1vel int2 recebe dados (obt\u00e9m um novo valor) do canal ch (operador de prefixo un\u00e1rio, prefixo significa receber). Isso sup\u00f5e que int2 j\u00e1 esteja declarado; caso contr\u00e1rio, pode ser escrito como: int2\u00a0:= &lt;- ch. Outra forma &lt;- ch pode ser usada para obter o (pr\u00f3ximo) valor do canal. Esse valor \u00e9 efetivamente descartado, mas pode ser testado. \u00c9 por isso que o seguinte\u00a0c\u00f3digo.</p>\n<pre>if &lt;-ch != 1000{<br>  ...<br>}</pre>\n<p>O mesmo operador &lt;- \u00e9 usado para enviar e receber, mas Go descobre o que fazer dependendo dos operandos. Embora n\u00e3o seja necess\u00e1rio, para facilitar a leitura, o nome do canal geralmente come\u00e7a com ch ou cont\u00e9m\u00a0chan.</p>\n<p><em>As opera\u00e7\u00f5es </em><em>enviar e </em><em>receber do canal s\u00e3o at\u00f4micas, o que significa que elas sempre s\u00e3o conclu\u00eddas sem interrup\u00e7\u00e3o.</em></p>\n<p>A utiliza\u00e7\u00e3o do operador de comunica\u00e7\u00e3o \u00e9 ilustrada no seguinte\u00a0exemplo:</p>\n<pre>package main<br>import (<br>  \"fmt\"<br>  \"time\"<br>)<br>func main() {<br>  ch := make(chan string)<br>  go sendData(ch) // chamando goroutine para enviar os dados<br>  go getData(ch)  // chamando goroutine para receber os dados<br>  time.Sleep(1e9)<br>}<br>func sendData(ch chan string) { // enviando dados para o canal ch<br>  ch &lt;- \"Washington\"<br>  ch &lt;- \"Tripoli\"<br>  ch &lt;- \"London\"<br>  ch &lt;- \"Beijing\"<br>  ch &lt;- \"Tokyo\"<br>}<br>func getData(ch chan string) {<br>  var input string<br>  for {<br>    input = &lt;-ch // recebendo dados enviados para o canal ch<br>    fmt.Printf(\"%s \", input)<br>  }<br>  close(ch) // fecha o canal<br>}</pre>\n<p>No bloco principal main() do c\u00f3digo, presente na <strong>linha 8</strong>, \u00e9 criado um canal chamado ch para troca de mensagens do tipo string. Em seguida, duas goroutines s\u00e3o iniciadas: sendData() (na <strong>linha 9</strong>) envia <strong>5</strong> strings atrav\u00e9s do canal ch (veja a implementa\u00e7\u00e3o da <strong>linha 14</strong> at\u00e9 a <strong>linha 20</strong>), e getData() (na <strong>linha 10</strong>) as recebe uma a uma na vari\u00e1vel input (na <strong>linha 25</strong>) e imprime o conte\u00fado recebido (na <strong>linha 26</strong>). Para que duas goroutines possam se comunicar, \u00e9 necess\u00e1rio passar o mesmo canal como par\u00e2metro para ambas. Experimente o que acontece ao comentar a linha time.Sleep(1e9). <em>Lembre-se tamb\u00e9m de comentar a importa\u00e7\u00e3o do pacote </em><em>time, caso contr\u00e1rio o c\u00f3digo n\u00e3o ir\u00e1 compilar.</em></p>\n<p>\u00c9 importante ressaltar a necessidade de sincroniza\u00e7\u00e3o entre as goroutines:</p>\n<ul>\n<li>A fun\u00e7\u00e3o main() aguarda 1 segundo para permitir que ambas as goroutines sejam conclu\u00eddas. Caso contr\u00e1rio, sendData() n\u00e3o ter\u00e1 oportunidade de produzir sua\u00a0sa\u00edda.</li>\n<li>getData() trabalha com um loop infinito, que \u00e9 interrompido somente quando sendData() termina e o canal ch est\u00e1\u00a0vazio.</li>\n<li>Caso sejam removidas uma ou todas as palavras-chave go, o programa deixar\u00e1 de funcionar e o tempo de execu\u00e7\u00e3o do Go lan\u00e7ar\u00e1 um\u00a0erro:</li>\n<li>--- Error run &lt;path&gt; with code Crashed Fatal error: all goroutines are asleep - deadlock!</li>\n</ul>\n<p>Essa ocorr\u00eancia se d\u00e1 pelo fato de o tempo de execu\u00e7\u00e3o do Go ser capaz de detectar que todas as goroutines (ou talvez apenas uma, neste caso) est\u00e3o aguardando por algo (seja escrever em um canal ou ser capaz de ler de um canal), impedindo assim o avan\u00e7o do programa. Trata-se de uma forma de impasse (deadlock) que o tempo de execu\u00e7\u00e3o \u00e9 capaz de identificar.</p>\n<blockquote><em>Observa\u00e7\u00e3o: Evite utilizar declara\u00e7\u00f5es de impress\u00e3o para indicar a ordem de envio e recebimento em um canal. Essa abordagem pode gerar resultados fora de ordem devido ao atraso entre a declara\u00e7\u00e3o de impress\u00e3o e a efetiva\u00e7\u00e3o do envio e recebimento pelo\u00a0canal.</em></blockquote>\n<h3>Em resumo</h3>\n<p>As goroutines s\u00e3o unidades leves de execu\u00e7\u00e3o gerenciadas pelo runtime do Go. Elas permitem que tarefas sejam executadas de forma ass\u00edncrona e concorrente, aproveitando ao m\u00e1ximo os recursos do processador. A cria\u00e7\u00e3o e destrui\u00e7\u00e3o de goroutines s\u00e3o de baixo custo, o que permite uma abordagem flex\u00edvel para a concorr\u00eancia.</p>\n<p>Para que as goroutines se comuniquem e sincronizem, o Go utiliza os channels. Os channels s\u00e3o canais de comunica\u00e7\u00e3o e sincroniza\u00e7\u00e3o entre as goroutines, permitindo a troca segura de dados. Eles garantem que apenas uma goroutine tenha acesso aos dados em um determinado momento, evitando condi\u00e7\u00f5es de corrida e problemas de concorr\u00eancia.</p>\n<p>Em resumo, o Go se destaca como uma linguagem de programa\u00e7\u00e3o moderna, eficiente e f\u00e1cil de usar, especialmente no contexto da concorr\u00eancia. Com suas goroutines e channels, o Go fornece um modelo de programa\u00e7\u00e3o concorrente e paralela poderoso, permitindo que os desenvolvedores aproveitem ao m\u00e1ximo os recursos do sistema e criem software de alta performance.</p>\n<h3>Referencias</h3>\n<ul>\n<li><a href=\"https://a.co/d/afh6i4x\">A Linguagem de Programa\u00e7\u00e3o Go</a></li>\n<li><a href=\"https://a.co/d/14Jq9fX\">The Way To\u00a0Go</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=85b6a127b12f\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["paralelismo","programa\u00e7\u00e3o","go","concorr\u00eancia"]},{"title":"Conhecendo a internet","pubDate":"2023-05-26 21:27:07","link":"https://medium.com/@rgribeiro/conhecendo-a-internet-54c0afb9e09d?source=rss-303f8669abf9------2","guid":"https://medium.com/p/54c0afb9e09d","author":"Rafael Ribeiro","thumbnail":"https://cdn-images-1.medium.com/max/1024/0*4u0iEzCl8HFovQYe","description":"\n<p>Um breve\u00a0resumo</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4u0iEzCl8HFovQYe\"><figcaption>Photo by <a href=\"https://unsplash.com/@nasa?utm_source=medium&amp;utm_medium=referral\">NASA</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Nas \u00faltimas semanas, tenho me dedicado aos estudos sobre redes de computadores por meio do curso \u201cGrokking Computer Networking for Software Engineers\u201d oferecido pela Educative.io. Esse curso abrange os fundamentos de redes, programa\u00e7\u00e3o de sockets em Python, utiliza\u00e7\u00e3o de ferramentas de linha de comando e explora os protocolos em cada camada. Al\u00e9m disso, ele oferece uma abordagem pr\u00e1tica para a implementa\u00e7\u00e3o de protocolos de rede que envolvem processamento distribu\u00eddo. Assim, decidi fazer uma s\u00e9rie de artigos abordando o conte\u00fado que aprenderei.</p>\n<h3>O que \u00e9 a internet?</h3>\n<p>Desde seu surgimento, a internet desempenha um papel fundamental em nossas vidas, sendo dif\u00edcil imaginar uma exist\u00eancia sem ela. Estamos constantemente dependentes dela para o sustento, rotinas di\u00e1rias e entretenimento, tornando-se praticamente um servi\u00e7o p\u00fablico essencial.</p>\n<p>Mas como ela realmente funciona? O que acontece nos bastidores? Aqui \u00e9 o lugar ideal para obter essas respostas! A internet \u00e9 uma intricada rede global de computadores interligados.</p>\n<h3>Mas primeiro, o que \u00e9 uma\u00a0rede?</h3>\n<p>Uma rede \u00e9 oficialmente definida como um grupo ou sistema de pessoas, ou itens interconectados.</p>\n<p>Em outras palavras, esta\u00e7\u00f5es de trem conectadas por trilhos formam uma rede <em>ferrovi\u00e1ria</em>, enquanto pessoas que se seguem no Twitter constituem uma rede social\u00a0online.</p>\n<p>Da mesma forma, computadores conectados entre si por meio de r\u00e1dio, cabos ou conex\u00f5es sem fio formam uma rede de computadores.</p>\n<h4>Por que Redes de Computadores?</h4>\n<p>As redes de computadores t\u00eam dois prop\u00f3sitos principais: <strong>comunica\u00e7\u00e3o </strong>usando computadores e <strong>compartilhamento de recursos.</strong> A internet permite fazer essas duas coisas em diferentes redes de computadores.</p>\n<h4>A Internet</h4>\n<p>A internet \u00e9 basicamente uma rede composta por v\u00e1rias redes de computadores.</p>\n<p>Assim, seu computador pessoal est\u00e1 conectado a outros computadores em sua casa ou local de trabalho, formando uma pequena rede de computadores, que, por sua vez, est\u00e1 conectada a outras redes de computadores. Desse modo, a internet global abrange uma intricada teia de redes de computadores interconectadas.</p>\n<h3>Uma r\u00e1pida hist\u00f3ria da\u00a0Internet</h3>\n<h4>Mas por que aprender a hist\u00f3ria?</h4>\n<ul>\n<li>Conhe\u00e7a os erros cometidos durante o desenvolvimento da internet e evite repeti-los.</li>\n<li>Entenda por que algumas coisas s\u00e3o projetadas e funcionam da maneira que funcionam hoje.</li>\n<li>Por \u00faltimo, \u00e9\u00a0legal!</li>\n</ul>\n<h4><strong>Os anos 50: Guerra\u00a0fria</strong></h4>\n<p>O nascimento da Internet remonta a meados do s\u00e9culo\u00a0passado.</p>\n<ul>\n<li>Os EUA estavam no meio de uma guerra fria com a Uni\u00e3o Sovi\u00e9tica e ambas as na\u00e7\u00f5es tentavam obter vantagem sobre a\u00a0outra.</li>\n<li>Em 1957, os sovi\u00e9ticos <a href=\"http://history.nasa.gov/sputnik/\">lan\u00e7aram o Sputnik,</a> o primeiro sat\u00e9lite do mundo, nos impulsionando para a era espacial.</li>\n<li>Isso pegou os EUA desprevenidos e, em resposta, o governo dos EUA criou a <a href=\"https://en.wikipedia.org/wiki/DARPA\">ARPA </a>(Ag\u00eancia de Projetos de Pesquisa Avan\u00e7ada), que foi mandat\u00e1vel com a responsabilidade do desenvolvimento tecnol\u00f3gico e avan\u00e7o cient\u00edfico do\u00a0pa\u00eds.</li>\n</ul>\n<h4><strong>Os anos 60\u201370:\u00a0ARPANET</strong></h4>\n<ul>\n<li>A ARPA foi concebida para facilitar a pesquisa, mas seus computadores n\u00e3o podiam se comunicar.</li>\n<li>A ARPA enviou uma solicita\u00e7\u00e3o para o projeto de uma rede que permitiria que computadores em todo o pa\u00eds se comunicassem.</li>\n<li>Uma rede chamada ARPANET foi desenvolvida ao longo de um ano. Em setembro de 1969, a ARPANET foi ativada. Os primeiros quatro n\u00f3s estavam na UCLA, Stanford, MIT e na Universidade de Utah. Nos anos 70, surgiram outras redes de computadores como a\u00a0ARPANET.</li>\n<li>Embora os computadores em uma rede pudessem se comunicar por meio de uma forma padr\u00e3o de comunica\u00e7\u00e3o definida pelo administrador de rede de cada rede, os computadores em redes diferentes n\u00e3o podiam se comunicar, pois cada rede tinha seu pr\u00f3prio idioma ou\u200a\u2014\u200amais formalmente\u200a\u2014\u200aprotocolo.</li>\n<li>Ent\u00e3o, um protocolo padronizado chamado Transmission Control Protocol foi inventado (<a href=\"https://tools.ietf.org/html/rfc675\">RFC\u00a0675</a>).</li>\n<li>Foi tamb\u00e9m em <a href=\"https://tools.ietf.org/html/rfc675\">RFC 675 </a>que o termo \u201cInternet\u201d foi usado pela primeira vez. RFCs posteriores continuaram o\u00a0uso.</li>\n</ul>\n<blockquote>Voc\u00ea sabia? A Ag\u00eancia de Projetos de Pesquisa Avan\u00e7ada (ARPA) agora \u00e9 conhecida como Ag\u00eancia de Projetos de Pesquisa Avan\u00e7ada de Defesa (DARPA) para enfatizar seu foco na\u00a0defesa!</blockquote>\n<h4><strong>Os anos 80: protocolos</strong></h4>\n<ul>\n<li>A ARPANET foi totalmente migrada para\u00a0TCP/IP.</li>\n<li>\u00c0 medida que entramos na d\u00e9cada de 1980, os computadores foram adicionados \u00e0 Internet em uma taxa crescente. Esses computadores eram principalmente de organiza\u00e7\u00f5es governamentais, acad\u00eamicas e de pesquisa. Para grande surpresa dos engenheiros, a popularidade inicial da Internet foi impulsionada pelo uso do correio eletr\u00f4nico.</li>\n</ul>\n<h4><strong>Os anos 90: a World Wide\u00a0Web</strong></h4>\n<ul>\n<li>Durante os anos 90, os pesquisadores do Conselho Europeu de Pesquisa Nuclear (<a href=\"https://home.cern/\">CERN</a>) sentiram a necessidade de compartilhamento automatizado de suas descobertas entre seus computadores. O CERN tinha documentos que faziam refer\u00eancia cruzada a outros documentos. Ent\u00e3o, havia esses (hiper)links entre documentos.</li>\n<li>Confira uma vers\u00e3o restaurada do <a href=\"http://line-mode.cern.ch/www/hypertext/WWW/TheProject.html\">primeiro site de todos os\u00a0tempos</a>!</li>\n<li>Posteriormente, foram realizadas aplica\u00e7\u00f5es educacionais, comerciais e tantas\u00a0outras.</li>\n<li>A World Wide Web ficou ainda mais popular com o advento de navegadores como <strong>Mosaic </strong>e <strong>Netscape</strong>, que permitiram combinar gr\u00e1ficos com navega\u00e7\u00e3o na\u00a0web!</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*b3YfROMilDvnLCEjg_gH7w.jpeg\"><figcaption>Em 1990, Tim Berners-Lee apresentou seu projeto World Wide Web para armazenar e recuperar esses documentos interconectados.</figcaption></figure><blockquote>\u201c\u2026Criar a web foi realmente um ato de desespero porque a situa\u00e7\u00e3o sem ela era muito dif\u00edcil quando eu estava trabalhando no CERN mais tarde. A maior parte da tecnologia envolvida na web, como o hipertexto, como a Internet, objetos de texto com v\u00e1rias fontes, j\u00e1 foi projetada. Eu s\u00f3 tinha que coloc\u00e1-los juntos. Foi um passo de generaliza\u00e7\u00e3o, indo para um n\u00edvel mais alto de abstra\u00e7\u00e3o, pensando em todos os sistemas de documenta\u00e7\u00e3o existentes como sendo possivelmente parte de um sistema de documenta\u00e7\u00e3o imagin\u00e1rio maior.\u201d\u200a\u2014\u200aTim Berners\u00a0Lee</blockquote>\n<p><strong>Search Engines</strong></p>\n<p>Outro fato engra\u00e7ado \u00e9 que, inicialmente, n\u00e3o havia mecanismos de\u00a0busca.</p>\n<p>Ent\u00e3o, como voc\u00ea encontraria um site? Bem, voc\u00ea n\u00e3o poderia. Ou voc\u00ea sabia, ou n\u00e3o. Claro, voc\u00ea pode acessar um site por acidente ou seguindo um link de outro site que voc\u00ea\u00a0conhece.</p>\n<p>Ent\u00e3o, as pessoas come\u00e7aram a criar <a href=\"https://en.wikipedia.org/wiki/World_Wide_Web_Virtual_Library\">\u00edndices est\u00e1ticos da web</a>\u200a\u2014\u200auma lista categorizada de sites. As pessoas sentavam e clicavam aleatoriamente em links para encontrar p\u00e1ginas da web e adicionar links ao seu \u00edndice. Mas isso n\u00e3o poderia escalar. Ent\u00e3o, eventualmente, os mecanismos de busca foram \u201cinventados\u201d.</p>\n<p>Altavista e Yahoo! Estavam entre os motores de busca anteriores. De acordo com este <a href=\"https://en.wikipedia.org/wiki/Timeline_of_web_search_engines\">artigo da Wikipedia</a>, o primeiro \u00edndice automatizado da Web foi o World Wide Web Wanderer. Logo depois, o primeiro mecanismo de busca na web, o W3Catalog, foi inventado.</p>\n<h4><strong>O s\u00e9culo XXI: a era da\u00a0Internet</strong></h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4JjxDAXaUVBDAJIF\"><figcaption>Photo by <a href=\"https://unsplash.com/@ilgmyzin?utm_source=medium&amp;utm_medium=referral\">ilgmyzin</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>E agora aqui estamos. Em uma \u00e9poca em que todos os nossos dispositivos rodam na Internet, at\u00e9 torradeiras para alguns\u200a\u2014\u200aa era da Internet das Coisas est\u00e1 aqui! A vida sem ela parece quase inconceb\u00edvel.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=54c0afb9e09d\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Um breve\u00a0resumo</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4u0iEzCl8HFovQYe\"><figcaption>Photo by <a href=\"https://unsplash.com/@nasa?utm_source=medium&amp;utm_medium=referral\">NASA</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Nas \u00faltimas semanas, tenho me dedicado aos estudos sobre redes de computadores por meio do curso \u201cGrokking Computer Networking for Software Engineers\u201d oferecido pela Educative.io. Esse curso abrange os fundamentos de redes, programa\u00e7\u00e3o de sockets em Python, utiliza\u00e7\u00e3o de ferramentas de linha de comando e explora os protocolos em cada camada. Al\u00e9m disso, ele oferece uma abordagem pr\u00e1tica para a implementa\u00e7\u00e3o de protocolos de rede que envolvem processamento distribu\u00eddo. Assim, decidi fazer uma s\u00e9rie de artigos abordando o conte\u00fado que aprenderei.</p>\n<h3>O que \u00e9 a internet?</h3>\n<p>Desde seu surgimento, a internet desempenha um papel fundamental em nossas vidas, sendo dif\u00edcil imaginar uma exist\u00eancia sem ela. Estamos constantemente dependentes dela para o sustento, rotinas di\u00e1rias e entretenimento, tornando-se praticamente um servi\u00e7o p\u00fablico essencial.</p>\n<p>Mas como ela realmente funciona? O que acontece nos bastidores? Aqui \u00e9 o lugar ideal para obter essas respostas! A internet \u00e9 uma intricada rede global de computadores interligados.</p>\n<h3>Mas primeiro, o que \u00e9 uma\u00a0rede?</h3>\n<p>Uma rede \u00e9 oficialmente definida como um grupo ou sistema de pessoas, ou itens interconectados.</p>\n<p>Em outras palavras, esta\u00e7\u00f5es de trem conectadas por trilhos formam uma rede <em>ferrovi\u00e1ria</em>, enquanto pessoas que se seguem no Twitter constituem uma rede social\u00a0online.</p>\n<p>Da mesma forma, computadores conectados entre si por meio de r\u00e1dio, cabos ou conex\u00f5es sem fio formam uma rede de computadores.</p>\n<h4>Por que Redes de Computadores?</h4>\n<p>As redes de computadores t\u00eam dois prop\u00f3sitos principais: <strong>comunica\u00e7\u00e3o </strong>usando computadores e <strong>compartilhamento de recursos.</strong> A internet permite fazer essas duas coisas em diferentes redes de computadores.</p>\n<h4>A Internet</h4>\n<p>A internet \u00e9 basicamente uma rede composta por v\u00e1rias redes de computadores.</p>\n<p>Assim, seu computador pessoal est\u00e1 conectado a outros computadores em sua casa ou local de trabalho, formando uma pequena rede de computadores, que, por sua vez, est\u00e1 conectada a outras redes de computadores. Desse modo, a internet global abrange uma intricada teia de redes de computadores interconectadas.</p>\n<h3>Uma r\u00e1pida hist\u00f3ria da\u00a0Internet</h3>\n<h4>Mas por que aprender a hist\u00f3ria?</h4>\n<ul>\n<li>Conhe\u00e7a os erros cometidos durante o desenvolvimento da internet e evite repeti-los.</li>\n<li>Entenda por que algumas coisas s\u00e3o projetadas e funcionam da maneira que funcionam hoje.</li>\n<li>Por \u00faltimo, \u00e9\u00a0legal!</li>\n</ul>\n<h4><strong>Os anos 50: Guerra\u00a0fria</strong></h4>\n<p>O nascimento da Internet remonta a meados do s\u00e9culo\u00a0passado.</p>\n<ul>\n<li>Os EUA estavam no meio de uma guerra fria com a Uni\u00e3o Sovi\u00e9tica e ambas as na\u00e7\u00f5es tentavam obter vantagem sobre a\u00a0outra.</li>\n<li>Em 1957, os sovi\u00e9ticos <a href=\"http://history.nasa.gov/sputnik/\">lan\u00e7aram o Sputnik,</a> o primeiro sat\u00e9lite do mundo, nos impulsionando para a era espacial.</li>\n<li>Isso pegou os EUA desprevenidos e, em resposta, o governo dos EUA criou a <a href=\"https://en.wikipedia.org/wiki/DARPA\">ARPA </a>(Ag\u00eancia de Projetos de Pesquisa Avan\u00e7ada), que foi mandat\u00e1vel com a responsabilidade do desenvolvimento tecnol\u00f3gico e avan\u00e7o cient\u00edfico do\u00a0pa\u00eds.</li>\n</ul>\n<h4><strong>Os anos 60\u201370:\u00a0ARPANET</strong></h4>\n<ul>\n<li>A ARPA foi concebida para facilitar a pesquisa, mas seus computadores n\u00e3o podiam se comunicar.</li>\n<li>A ARPA enviou uma solicita\u00e7\u00e3o para o projeto de uma rede que permitiria que computadores em todo o pa\u00eds se comunicassem.</li>\n<li>Uma rede chamada ARPANET foi desenvolvida ao longo de um ano. Em setembro de 1969, a ARPANET foi ativada. Os primeiros quatro n\u00f3s estavam na UCLA, Stanford, MIT e na Universidade de Utah. Nos anos 70, surgiram outras redes de computadores como a\u00a0ARPANET.</li>\n<li>Embora os computadores em uma rede pudessem se comunicar por meio de uma forma padr\u00e3o de comunica\u00e7\u00e3o definida pelo administrador de rede de cada rede, os computadores em redes diferentes n\u00e3o podiam se comunicar, pois cada rede tinha seu pr\u00f3prio idioma ou\u200a\u2014\u200amais formalmente\u200a\u2014\u200aprotocolo.</li>\n<li>Ent\u00e3o, um protocolo padronizado chamado Transmission Control Protocol foi inventado (<a href=\"https://tools.ietf.org/html/rfc675\">RFC\u00a0675</a>).</li>\n<li>Foi tamb\u00e9m em <a href=\"https://tools.ietf.org/html/rfc675\">RFC 675 </a>que o termo \u201cInternet\u201d foi usado pela primeira vez. RFCs posteriores continuaram o\u00a0uso.</li>\n</ul>\n<blockquote>Voc\u00ea sabia? A Ag\u00eancia de Projetos de Pesquisa Avan\u00e7ada (ARPA) agora \u00e9 conhecida como Ag\u00eancia de Projetos de Pesquisa Avan\u00e7ada de Defesa (DARPA) para enfatizar seu foco na\u00a0defesa!</blockquote>\n<h4><strong>Os anos 80: protocolos</strong></h4>\n<ul>\n<li>A ARPANET foi totalmente migrada para\u00a0TCP/IP.</li>\n<li>\u00c0 medida que entramos na d\u00e9cada de 1980, os computadores foram adicionados \u00e0 Internet em uma taxa crescente. Esses computadores eram principalmente de organiza\u00e7\u00f5es governamentais, acad\u00eamicas e de pesquisa. Para grande surpresa dos engenheiros, a popularidade inicial da Internet foi impulsionada pelo uso do correio eletr\u00f4nico.</li>\n</ul>\n<h4><strong>Os anos 90: a World Wide\u00a0Web</strong></h4>\n<ul>\n<li>Durante os anos 90, os pesquisadores do Conselho Europeu de Pesquisa Nuclear (<a href=\"https://home.cern/\">CERN</a>) sentiram a necessidade de compartilhamento automatizado de suas descobertas entre seus computadores. O CERN tinha documentos que faziam refer\u00eancia cruzada a outros documentos. Ent\u00e3o, havia esses (hiper)links entre documentos.</li>\n<li>Confira uma vers\u00e3o restaurada do <a href=\"http://line-mode.cern.ch/www/hypertext/WWW/TheProject.html\">primeiro site de todos os\u00a0tempos</a>!</li>\n<li>Posteriormente, foram realizadas aplica\u00e7\u00f5es educacionais, comerciais e tantas\u00a0outras.</li>\n<li>A World Wide Web ficou ainda mais popular com o advento de navegadores como <strong>Mosaic </strong>e <strong>Netscape</strong>, que permitiram combinar gr\u00e1ficos com navega\u00e7\u00e3o na\u00a0web!</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/700/1*b3YfROMilDvnLCEjg_gH7w.jpeg\"><figcaption>Em 1990, Tim Berners-Lee apresentou seu projeto World Wide Web para armazenar e recuperar esses documentos interconectados.</figcaption></figure><blockquote>\u201c\u2026Criar a web foi realmente um ato de desespero porque a situa\u00e7\u00e3o sem ela era muito dif\u00edcil quando eu estava trabalhando no CERN mais tarde. A maior parte da tecnologia envolvida na web, como o hipertexto, como a Internet, objetos de texto com v\u00e1rias fontes, j\u00e1 foi projetada. Eu s\u00f3 tinha que coloc\u00e1-los juntos. Foi um passo de generaliza\u00e7\u00e3o, indo para um n\u00edvel mais alto de abstra\u00e7\u00e3o, pensando em todos os sistemas de documenta\u00e7\u00e3o existentes como sendo possivelmente parte de um sistema de documenta\u00e7\u00e3o imagin\u00e1rio maior.\u201d\u200a\u2014\u200aTim Berners\u00a0Lee</blockquote>\n<p><strong>Search Engines</strong></p>\n<p>Outro fato engra\u00e7ado \u00e9 que, inicialmente, n\u00e3o havia mecanismos de\u00a0busca.</p>\n<p>Ent\u00e3o, como voc\u00ea encontraria um site? Bem, voc\u00ea n\u00e3o poderia. Ou voc\u00ea sabia, ou n\u00e3o. Claro, voc\u00ea pode acessar um site por acidente ou seguindo um link de outro site que voc\u00ea\u00a0conhece.</p>\n<p>Ent\u00e3o, as pessoas come\u00e7aram a criar <a href=\"https://en.wikipedia.org/wiki/World_Wide_Web_Virtual_Library\">\u00edndices est\u00e1ticos da web</a>\u200a\u2014\u200auma lista categorizada de sites. As pessoas sentavam e clicavam aleatoriamente em links para encontrar p\u00e1ginas da web e adicionar links ao seu \u00edndice. Mas isso n\u00e3o poderia escalar. Ent\u00e3o, eventualmente, os mecanismos de busca foram \u201cinventados\u201d.</p>\n<p>Altavista e Yahoo! Estavam entre os motores de busca anteriores. De acordo com este <a href=\"https://en.wikipedia.org/wiki/Timeline_of_web_search_engines\">artigo da Wikipedia</a>, o primeiro \u00edndice automatizado da Web foi o World Wide Web Wanderer. Logo depois, o primeiro mecanismo de busca na web, o W3Catalog, foi inventado.</p>\n<h4><strong>O s\u00e9culo XXI: a era da\u00a0Internet</strong></h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4JjxDAXaUVBDAJIF\"><figcaption>Photo by <a href=\"https://unsplash.com/@ilgmyzin?utm_source=medium&amp;utm_medium=referral\">ilgmyzin</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>E agora aqui estamos. Em uma \u00e9poca em que todos os nossos dispositivos rodam na Internet, at\u00e9 torradeiras para alguns\u200a\u2014\u200aa era da Internet das Coisas est\u00e1 aqui! A vida sem ela parece quase inconceb\u00edvel.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=54c0afb9e09d\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["internet"]},{"title":"Criando um Encurtador de URL","pubDate":"2023-01-23 15:02:41","link":"https://medium.com/@rgribeiro/criando-um-encurtador-de-url-ec554470d649?source=rss-303f8669abf9------2","guid":"https://medium.com/p/ec554470d649","author":"Rafael Ribeiro","thumbnail":"https://cdn-images-1.medium.com/max/830/1*yY_xCZPB6pkwnMrvSAj1Nw.jpeg","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/830/1*yY_xCZPB6pkwnMrvSAj1Nw.jpeg\"></figure><p>Ol\u00e1, espero que estejam todos bem. Hoje falarei sobre como planejei e executei a cria\u00e7\u00e3o de um encurtador de URL e tamb\u00e9m os pr\u00f3ximos planos para que nosso sistema evolua de maneira saud\u00e1vel. Portanto, passaremos desde dos requisitos funcionais e n\u00e3o funcionas e tamb\u00e9m regra de neg\u00f3cios que nossa aplica\u00e7\u00e3o precisa\u00a0cumprir.</p>\n<h3>O que \u00e9 Encurtador de\u00a0URL?</h3>\n<p>Antes de come\u00e7ar, \u00e9 necess\u00e1rio explicar do que se trata esse tipo de\u00a0servi\u00e7o.</p>\n<p>O objetivo de um encurtador de url \u00e9 bem simples. \u00c9 um servi\u00e7o bem conhecido, como, por exemplo, bit.ly ou tinyurl, que encurtar URL longos para URLs mais simples. Assim os usu\u00e1rios ser\u00e3o redirecionados para a URL original quando acessam esses links curtos. Por exemplo, pegue a seguinte\u00a0URL:</p>\n<pre><a href=\"https://www.linkedin.com/in/rafael-mgr/\">https://www.linkedin.com/in/rafael-mgr/</a></pre>\n<p>Obteremos a seguinte\u00a0link</p>\n<pre><a href=\"https://tinyurl.com/bdfwpx29\">https://tinyurl.com/bdfwpx29</a></pre>\n<p>Como pode ser visto, o link foi diminuiu drasticamente.</p>\n<p>O encurtamento de URL \u00e9 usado para otimizar links entre dispositivos, rastrear links individuais para analisar o p\u00fablico, medir o desempenho de campanhas publicit\u00e1rias ou ocultar URLs originais afiliados.</p>\n<h3>Requisitos funcionais e n\u00e3o funcionais.</h3>\n<p>Podemos seguir e definir quais s\u00e3o os requisitos funcionais e n\u00e3o funcionais e as regras de neg\u00f3cios. Mas antes disso, gostaria de definir o que\u00a0s\u00e3o.</p>\n<h4>Requisitos Funcionais</h4>\n<p>S\u00e3o requisitos que devem ser atendidos e resolvidos pelo software por meio de fun\u00e7\u00f5es ou servi\u00e7os. Alguns exemplos desse tipo de requisitos:</p>\n<ul>\n<li>inserir dados em um formul\u00e1rio</li>\n<li>buscar pratos espec\u00edficos em um card\u00e1pio;</li>\n<li>consultar a situa\u00e7\u00e3o de um\u00a0pedido;</li>\n<li>realizar compras;</li>\n<li>comunicar-se com um atendente;</li>\n<li>alterar informa\u00e7\u00f5es de um registro;</li>\n<li>elaborar relat\u00f3rios.</li>\n</ul>\n<p>Tudo o que for relacionada a uma a\u00e7\u00e3o a ser feita \u00e9 considerado uma fun\u00e7\u00e3o. Tamb\u00e9m \u00e9 importante lembrar que quanto menos amb\u00edguos e mais objetivos forme os requisitos funcionais, maio ser\u00e1 a qualidade do software\u00a0gerado.</p>\n<h4>Requisitos n\u00e3o funcionais</h4>\n<p>Os requisitos n\u00e3o funcionais s\u00e3o todos aqueles relacionados \u00e0 forma como o software tornar\u00e1 realidade os que est\u00e1 sendo planejado. Assim, enquanto requisitos funcionas est\u00e3o focados no que ser\u00e1 feito, os n\u00e3o funcionais descrevem como ser\u00e3o\u00a0feitos.</p>\n<p>Dessa forma, todos os pr\u00e9-requisitos do sistema, de hardware, de software e operacionais s\u00e3o documentados separadamente. Entre as caracter\u00edsticas t\u00e9cnicas que podem ser definidas est\u00e3o:</p>\n<ul>\n<li>tipo de sistema operacional;</li>\n<li>hardware a ser utilizado;</li>\n<li>processamento;</li>\n<li>consumo de\u00a0mem\u00f3ria;</li>\n<li>conex\u00e3o;</li>\n<li>banco de\u00a0dados;</li>\n<li>tipos de dispositivos onde o software pode ser\u00a0usado.</li>\n</ul>\n<p>Al\u00e9m disso, os requisitos n\u00e3o funcionais podem ser categorizados em 3 tipos, requisitos de produto final, organizacional e externo. Contudo, tamb\u00e9m h\u00e1 outras categorias, como:</p>\n<ul>\n<li>de efici\u00eancia;</li>\n<li>de confiabilidade;</li>\n<li>de portabilidade;</li>\n<li>de entrega;</li>\n<li>de implementa\u00e7\u00e3o;</li>\n<li>de padr\u00f5es;</li>\n<li>de inter</li>\n</ul>\n<p>Podemos ir mais afundo nesses quesitos, por\u00e9m foge um pouco do escopo desse artigo. Para saber mais, esse <a href=\"https://mestresdaweb.com.br/tecnologias/requisitos-funcionais-e-nao-funcionais-o-que-sao/#:~:text=O%20que%20s%C3%A3o%20requisitos%20n%C3%A3o,funcionais%20descrevem%20como%20ser%C3%A3o%20feitos.\">link</a> explica com maiores detalhes como podemos definir e separa os requisitos da nossa aplica\u00e7\u00e3o.</p>\n<p>Podemos agora retornar a defini\u00e7\u00f5es de requisitos da nossa aplica\u00e7\u00e3o.</p>\n<p>Nesse primeiro momento, \u00e9 preciso que seja definido os objetivos do nosso sistema, portanto nosso encurtador tem que atender os seguintes requisitos.</p>\n<p><strong>Requisitos Funcionais:</strong></p>\n<ol>\n<li>Dado um URL, nosso sistema tem que gerar um curto e \u00fanico \u201calias\u201d do nome. Esse link dever ser curto o suficiente para ser facilmente copiado e colocas entre aplica\u00e7\u00f5es.</li>\n<li>Quando usu\u00e1rios acessarem o link curto, nosso servi\u00e7o deve redirecionar eles para o link original.</li>\n<li>Usu\u00e1rios devem ter a op\u00e7\u00e3o de pegar um link customizado para seu\u00a0URL</li>\n<li>Os links devem expirar ap\u00f3s um intervalo padr\u00e3o. Os usu\u00e1rios deverem conseguir especificar o tempo de expira\u00e7\u00e3o.</li>\n</ol>\n<p><strong>Requisitos n\u00e3o Funcionais:</strong></p>\n<ol>\n<li>O sistema deve ter altamente dispon\u00edvel. Isso \u00e9 necess\u00e1rio porque, se nosso servi\u00e7o come\u00e7ar a falhar, os redirecionamentos de URL come\u00e7ar\u00e3o a\u00a0falhar.</li>\n<li>O redirecionamento de URL deve acontecer em tempo real com lat\u00eancia\u00a0m\u00ednima.</li>\n<li>Links encurtados n\u00e3o devem ser adivinhados (n\u00e3o previs\u00edveis)</li>\n</ol>\n<p><strong>Requisitos estendidos:</strong></p>\n<ol>\n<li>An\u00e1lise; por exemplo, quantas vezes um redirecionamento aconteceu?</li>\n<li>Nosso servi\u00e7o tamb\u00e9m deve ser acess\u00edvel por meio de APIs REST por outros servi\u00e7os.</li>\n</ol>\n<h3>Tr\u00e1fico e Modelagem da Capacidade</h3>\n<p>Nosso sistema ser\u00e1 usado, majoritariamente, em formato de leitura. Haver\u00e1 mutias solicita\u00e7\u00f5es de redirecionamento em compara\u00e7\u00e3o com novos encurtamentos de URL. Suponhamos de in\u00edcio uma propor\u00e7\u00e3o 100:1 entre leitura e\u00a0escrita.</p>\n<p><strong>Estimativa de tr\u00e1fico:</strong> Assumindo, que teremos total de 500 milh\u00f5es novas encurtamentos de URLs por m\u00eas, com propor\u00e7\u00e3o de leitura/grava\u00e7\u00e3o de 100:1, podemos esperar 50 bilh\u00f5es de redirecionamentos durante o mesmo\u00a0per\u00edodo:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/179/1*LtejIPNTXj4g8_id34ohMA.gif\"></figure><p>Quantas queries por segundo seria feita para nosso sistema? Novos encurtamentos e URLs por\u00a0segundo:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/381/1*mJYO0lL1cIijkJuqIGgp7Q.gif\"></figure><p><strong>Estimativas de armazenamento</strong>: Assumiremos que armazenamos cada solicita\u00e7\u00e3o de encurtamento de URL (e link encurtado associado) por 5 anos. Como esperarmos ter 500 milh\u00f5es de novos URLs armazenados todos os meses, o \u00famero total de objetos que esperarmos armazenar ser\u00e1 de 30\u00a0bilh\u00f5es:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/272/1*89Tqrr9GWbmRK8zbOrvsvg.gif\"></figure><p>Vamos assumir que cada objeto armazenado ser\u00e1 de aproximadamente 500 bytes(apenas uma estimativa aproximada\u200a\u2014\u200avamos investigar mais tarde). Precisaremos de 15 TB de armazenamento total.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/206/1*1fyIfpJ66yNuVRdho9b0EA.gif\"></figure><p><strong>Estimativas de largura de banda(Bandwidth estimates)</strong>\u00a0: Para solicita\u00e7\u00f5es de grava\u00e7\u00e3o, como esperamos 200 novos urls a cada segundo, o total de dados de entrada para nosso servi\u00e7o ser\u00e1 de 100 KB por\u00a0segundo</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/223/1*ErYRCCNcVJbO5HL9YWWotA.gif\"></figure><p>Para solicita\u00e7\u00f5es de leitura, como cada segundo esperamos redirecionamentos de cerca de 20 mil URLs, o total de dados de sa\u00edda para nosso servi\u00e7o seria de 10 MB por\u00a0segundo:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/221/1*WK-Xj0SKXiZqO19nFWl21w.gif\"></figure><p><strong>Estimativas de mem\u00f3ria</strong>: Se quisermos armazenar em cache alguns das URLs quentes acessados com frequ\u00eancia, quanta mem\u00f3ria precisaremos para armazen\u00e1-los? Se seguirmos a regra 80\u201320, o que significa que 20% das URLs geram 80% do tr\u00e1fego, gostar\u00edamos de armazenar em cache esses 20% de URLs\u00a0quentes.</p>\n<p>Como temos 20 mil solicita\u00e7\u00f5es por segundos, receberemos 1,7 bilh\u00e3o de solicita\u00e7\u00f5es por\u00a0dia:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/319/1*ecC94OzRK0_KDkeMlneALg.gif\"></figure><p>Para armazenar em cache 20% dessas solicita\u00e7\u00f5es, precisaremos de 170 GB de\u00a0mem\u00f3ria.</p>\n<p><strong>Estimativas de alto n\u00edvel</strong>: supondo 500 milh\u00f5es de novos URLs por m\u00eas e propor\u00e7\u00e3o de leitura: grava\u00e7\u00e3o de 100:1, a seguir est\u00e1 o resumo das estimativas de alto n\u00edvel para nosso\u00a0servi\u00e7o:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/770/1*MKajaHkhGt1TeE3tokBvcg.png\"></figure><h3>Sistema de\u00a0APIs</h3>\n<p>Podemos ter SOAP ou REST APIs para expor a funcionalidade do nosso servi\u00e7o. A seguir, pode ser as defini\u00e7\u00f5es das APIS para criar e excluir\u00a0URLs:</p>\n<pre>createURL(api_dev_key, original_url, custom_alias=None, user_name=None, expire_date=None)</pre>\n<p><strong>Par\u00e2metros:</strong></p>\n<ul>\n<li>api_dev_key (string): A chave de desenvolvedor da API de uma conta registrada. Isso ser\u00e1 usado para, entre outras coisas, limitar os usu\u00e1rios com base em sua cota\u00a0alocada.</li>\n<li>original_url (string): URL original a ser encurtado.</li>\n<li>custom_alias (string): chave personalizada opcional para a\u00a0URL.</li>\n<li>user_name (string): nome de usu\u00e1rio opcional a ser usado na codifica\u00e7\u00e3o.</li>\n<li>expire_date (string): data de expira\u00e7\u00e3o opcional para a URL abreviada</li>\n</ul>\n<p><strong>Retorno</strong>: (string)</p>\n<p>Uma inser\u00e7\u00e3o bem-sucedida retorna o URL abreviado; caso contr\u00e1rio, ele retornar\u00e1 um c\u00f3digo de\u00a0erro.</p>\n<pre>deleteURL(api_dev_key, url_key)</pre>\n<p>Onde \u201curl_key\u201d \u00e9 uma string que representa a URL abreviada a ser recuperada; uma exclus\u00e3o bem-sucedida retorna \u2018URL removido\u2019.</p>\n<p><strong>Como detectamos e prevenimos o abuso</strong>? Um usu\u00e1rio mal-intencionado pode nos tirar do neg\u00f3cio consumindo todas as chaves de URL no design atual. Para evitar abusos, podemos limitar os usu\u00e1rios por meio da api_dev_key. Cada api_dev_key pode ser limitada a um certo n\u00famero de cria\u00e7\u00f5es e redirecionamentos de URL por algum per\u00edodo (que pode ser definido para uma dura\u00e7\u00e3o diferente por chave de desenvolvedor).</p>\n<h3>Design Database</h3>\n<p>Antes de come\u00e7ar, temos algumas observa\u00e7\u00f5es sobre a natureza dos dados que armazenaremos:</p>\n<ol>\n<li>Precisaremos armazenar bilh\u00f5es de registros.</li>\n<li>Cada Objeto que \u00e9 pequeno (menos de\u00a01K)</li>\n<li>N\u00e3o h\u00e1 relacionamento entres registros., exceto armazena qual usu\u00e1rio criou um\u00a0URL.</li>\n<li>Nosso servi\u00e7o \u00e9 pesado de\u00a0Leitura</li>\n</ol>\n<h3>Esquema(Schema) do\u00a0Database</h3>\n<p>\u00c9 preciso de duas tabelas: uma para armazenar informa\u00e7\u00f5es sobre os mapeamentos de URL e outra para os dados do usu\u00e1rio que criou link\u00a0curto.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/463/0*DUlOWL9jCySbXFse.png\"></figure><p>Esquema de banco de dados de encurtamento de\u00a0URL</p>\n<p>Que tipo de banco de dados devemos usar? Como antecipamos o armazenamento de bilh\u00f5es de linhas e n\u00e3o precisamos usar relacionamentos entre objetos\u200a\u2014\u200aum armazenamento NoSQL como DynamoDB, Cassandra ou Riak \u00e9 uma escolha melhor. Uma escolha NoSQL tamb\u00e9m seria mais f\u00e1cil de escalar. Consulte SQL vs NoSQL para obter mais detalhes.</p>\n<h3>Design B\u00e1sico de Sistema e Algoritmo</h3>\n<p>O problema que estamos resolvendo \u00e9 como gerar um curta e chave \u00fanica para uma determinada URL.</p>\n<p>O exemplo dado para o caso TinyURL, a URL abreviada \u00e9 \u201c<a href=\"https://tinyurl.com/rxcsyr3r%E2%80%9D\">https://tinyurl.com/rxcsyr3r\u201d</a>. Os \u00faltimos oito caracteres desta URL constituem a chave curta que queremos gerar. Exploremos duas solu\u00e7\u00f5es\u00a0aqui:</p>\n<h3>1. Codificando a\u00a0URL</h3>\n<p>Podemos calcular um hash exclusivo (por exemplo, um MD5 ou SHA256, etc\u00a0...) do URL fornecido. O hash pode ent\u00e3o ser codificado para exibi\u00e7\u00e3o. Essa codifica\u00e7\u00e3o pode ser base36 ([a-z\u00a0,0\u20139]) ou base62 ([A-Z, a-z, 0\u20139]) e se adicionarmos \u2018+\u2019 e \u2018/\u2019 podemos usar a codifica\u00e7\u00e3o Base64. Uma pergunta razo\u00e1vel seria: qual deve ser o comprimento da tecla curta? 6, 8 ou 10 caracteres?</p>\n<p>Usando a codifica\u00e7\u00e3o base64, uma chave de 6 letras resultaria 68,7 bilh\u00f5es de strings poss\u00edveis. Usando a codifica\u00e7\u00e3o base64, uma chave de 8 letras resultaria em 281 trilh\u00f5es de strings poss\u00edveis.</p>\n<p>Com 68,7 bilh\u00f5es de strings \u00fanicas, suponhamos que seis letras seria suficiente para o nosso\u00a0sistema.</p>\n<p>Se usarmos o algoritmo MD5 como nossa fun\u00e7\u00e3o de hash, ele produzir\u00e1 um valor de hash de 128 bits. Ap\u00f3s a codifica\u00e7\u00e3o base64, obteremos uma string com mais de 21 caracteres (j\u00e1 que cada caracteres base64 codifica 6 bits do valor de hash). Agora s\u00f3 temos espa\u00e7o para 6 (ou 8) caracteres por tecla curta, como vamos escolher nossa chave ent\u00e3o? Podemos pegar as primeiras 6 (ou*) letras para a chave. Isso pode resultar em duplica\u00e7\u00e3o de chaves; para resolver isso, podemos escolher alguns outros caracteres da string de codifica\u00e7\u00e3o ou trocar alguns caracteres.</p>\n<p>Quais s\u00e3o os diferentes problemas com a nossa solu\u00e7\u00e3o? Temos os seguintes problemas como nosso esquema de codifica\u00e7\u00e3o:</p>\n<ol>\n<li>Se v\u00e1rios usu\u00e1rios inserirem o mesmo URL, eles poder\u00e3o obter o mesmo URL abreviado, o que n\u00e3o \u00e9 aceit\u00e1vel.</li>\n<li>E se partes do URL forem codificadas por URL? por exemplo, <a href=\"http://www.educative.io/distributed.php?id=design\">http://www.educative.io/distributed.php?id=design</a> e <a href=\"http://www.educative.io/distributed.php%3Fid%3Ddesign\">http://www.educative.io/distributed.php%3Fid%3Ddesign</a> s\u00e3o id\u00eanticos, exceto pela codifica\u00e7\u00e3o de\u00a0URL.</li>\n</ol>\n<p><strong>Solu\u00e7\u00e3o alternativa para os problemas</strong>: podemos anexar um n\u00famero de sequ\u00eancias crescente a cada URL de entrada para torn\u00e1-lo exclusivo e, em seguida, gerar seu hash. No entanto, n\u00e3o precisamos armazenar esse n\u00famero de sequ\u00eancias nos bancos de dados Poss\u00edveis problemas com essa abordagem podem se um n\u00famero de sequ\u00eancias crescentes. Pode transbordar? Acrescentar um n\u00famero de sequ\u00eancia crescente tamb\u00e9m afetar\u00e1 o desempenho do\u00a0servi\u00e7o.</p>\n<p>Outra solu\u00e7\u00e3o pode ser anexar o ID do usu\u00e1rio (que deve ser exclusivo) ao URL de entrada. No entanto, se o usu\u00e1rio n\u00e3o tiver feito login, ter\u00edamos que pedir ao usu\u00e1rio que escolhesse uma chave de exclusividade. Mesmo depois disso, se tivermos um conflito, teremos que continuar gerando uma chave at\u00e9 obtermos uma\u00a0\u00fanica.</p>\n<h3>2. Gerando Chaves\u00a0offline</h3>\n<p>Podemos ter um <strong>Key Generation Service (KGS)</strong> aut\u00f4nomo que gera strings aleat\u00f3rias de seis letras antecipadamente e as armazena em um banco de dados (vamos cham\u00e1-lo de key-db). Sempre que quisermos encurtar uma URL, pegaremos uma das chaves j\u00e1 geradas e a usaremos. Essa abordagem tornar\u00e1 as coais bastantes simples e r\u00e1pidas. N\u00e3o apenas n\u00e3o estamos codificando a URL, mas tamb\u00e9m n\u00e3o teremos que nos preocupar com duplica\u00e7\u00f5es ou colis\u00f5es. KGS ir\u00e1 certificar-se de que todas as chaves inseridas no key-DB sejam\u00a0\u00fanicas.</p>\n<p><strong>A concorr\u00eancia pode causar problemas?</strong> Assim que uma chave for usada, ela deve ser marcada no banco de dados para garantir que n\u00e3o seja usada novamente. Se houver v\u00e1rios servidores lendo chaves simultaneamente, poderemos obter um cen\u00e1rio em que dois ou mais servidores tentem ler a mesma chave do banco de dados. Como podemos resolver esse problema de simultaneidade?</p>\n<p>Os servidores podem usar o KGS para ler/marcar chaves no banco de dados. KGS pode usar duas tabelas para armazenar chaves: uma para chaves que ainda n\u00e3o foram usadas e outra para todas as chaves usadas. Assim que o KGS entrega as chaves a um dos servidores, ele pode mov\u00ea-las para a tabela de chaves usadas. O KGS sempre pode manter algumas chaves na mem\u00f3ria para fornec\u00ea-las rapidamente sempre que um servidor precisar\u00a0delas.</p>\n<p>Para simplificar, assim que o KGS carrega algumas chaves na mem\u00f3ria, ele pode mov\u00ea-las para a tabela de chaves usadas. Isso garante que cada servidor obtenha chaves exclusivas. Se o KGS morrer antes de atribuir todas as chaves carregadas a algum servidor, estaremos desperdi\u00e7ando essas chaves\u200a\u2014\u200ao que pode ser aceit\u00e1vel, dado o grande n\u00famero de chaves que\u00a0temos.</p>\n<p>O KGS tamb\u00e9m deve certificar-se de n\u00e3o fornecer a mesma chave para v\u00e1rios servidores. Para isso, ele deve sincronizar (ou bloquear) a estrutura de dados que cont\u00e9m as chaves antes de remover as chaves e entreg\u00e1-las a um servidor.</p>\n<p><strong>Qual seria o tamanho do banco de dados de chave?</strong> Com a codifica\u00e7\u00e3o base64, podemos gerar 68,7B chaves exclusivas de seis letras. Se precisarmos de um byte para armazenar um caractere alfanum\u00e9rico, podemos armazenar todas essas chaves\u00a0em:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/705/1*C09XJHEWPQrG10mi6pQcqQ.png\"></figure><p><strong>A KGS n\u00e3o \u00e9 um ponto \u00fanico de falha?</strong> \u00c9 sim para resolver isso, podemos ter r\u00e9plica em espera do KGS. Sempre que o servidor prim\u00e1rio morre, o servidor em esperar pode assumir o controle para gerar e fornecer\u00a0chaves.</p>\n<p><strong>Cada servidor de aplicativos pode armazenar em cache algumas chaves do key-db?</strong> Sim, isso certamente pode acelerar as coisas. Embora neste caso, se o servidor de aplicativos morrer antes de consumir todas as chaves, acabaremos perdendo essas chaves. Isso pode ser aceit\u00e1vel, pois temos 68B teclas exclusivas de seis\u00a0letras.</p>\n<p><strong>Como realizar\u00edamos uma pesquisa de chave?</strong> Podemos procurar a chave em nosso banco de dados para obter o URL completo. Se estiver presente no banco de dados, emita um status \u201cHTTP 302 Redirect\u201d de volta ao navegador, passando a URL armazenada no campo \u201cLocation\u201d da solicita\u00e7\u00e3o. Se essa chave n\u00e3o estiver presente em nosso sistema, emita um status \u201cHTTP 404 Not Found\u201d ou redirecione o usu\u00e1rio de volta para a p\u00e1gina\u00a0inicial.</p>\n<p><strong>Devemos impor limites de tamanho aos aliases personalizados?</strong> Nosso servi\u00e7o oferece suporte a aliases personalizados. Os usu\u00e1rios podem escolher qualquer \u2018chave\u2019 que quiserem, mas fornecer um alias personalizado n\u00e3o \u00e9 obrigat\u00f3rio. No entanto, \u00e9 razo\u00e1vel (e muitas vezes desej\u00e1vel) impor um limite de tamanho em um alias personalizado para garantir que tenhamos um banco de dados de URL consistente. Suponhamos que os usu\u00e1rios especifiquem no m\u00e1ximo 16 caracteres por chave de cliente (conforme refletido no esquema de banco de dados\u00a0acima).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/767/1*skvMqInVYEsTAJtzu5-5Qw.png\"></figure><h3>Particionamento de Dados e Replica\u00e7\u00e3o</h3>\n<p>Para ser poss\u00edvel escalar o banco de dados, precisamos particion\u00e1-lo para poder armazenar informa\u00e7\u00f5es sobre bilh\u00f5es de URLs. Portanto, precisamos desenvolver um esquema de particionamento que divide e armazene nossos dados em diferentes servidores de banco de\u00a0dados.</p>\n<h3>1. Particionamento baseado em intervalo</h3>\n<p>Podemos armazene URLs em parti\u00e7\u00f5es separadas como a primeira letra da chave de hash. Portanto, salvaremos todas as chaves de hash de URL come\u00e7ando com a letra \u2018A\u2019 (e \u2018a\u2019) em uma parti\u00e7\u00e3o, salvaremos aquelas que come\u00e7am com a letra \u2018B\u2019 em outra parti\u00e7\u00e3o e assim por diante. Essa abordagem \u00e9 chamada de particionamento baseado em intervalo. Podemos at\u00e9 combinar certas letras que ocorrem com menos frequ\u00eancia em uma parti\u00e7\u00e3o de banco de dados. Assim, devemos desenvolver um esquema de particionamento est\u00e1tico para sempre armazenar/encontrar uma URL de maneira previs\u00edvel.</p>\n<p>O principal problema com essa abordagem \u00e9 que ela pode levar a servidores de banco de dados desbalanceados. Por exemplo, decidimos colocar todas as URLs que come\u00e7am com a letra \u2018E\u2019 em uma parti\u00e7\u00e3o de banco de dados, mas depois percebemos que temos muitas URLs que come\u00e7am com a letra\u00a0\u2018E\u2019.</p>\n<h3>2. Particionamento Baseado em\u00a0Hash.</h3>\n<p>Neste esquema, pegamos um hash do objeto que estamos armazenando. Em seguida calculamos qual participa\u00e7\u00e3o usar com base hash. No nosso caso, podemos pegar o hash da chave ou link curto para determinar a participa\u00e7\u00e3o na qual armazenados o objeto de\u00a0dados.</p>\n<p>Nossa fun\u00e7\u00e3o de hash distribuir\u00e1 URLs aleatoriamente em diferentes parti\u00e7\u00f5es(por exemplo, nossa fun\u00e7\u00e3o de hash pode sempre mapear qualquer \u2018chave\u2019 para um n\u00famero entre [1,\u2026,256]). Esse n\u00famero representaria a parti\u00e7\u00e3o na qual armazenamos nosso\u00a0objeto.</p>\n<p>Essa abordagem ainda levar a parti\u00e7\u00f5es sobrecarregadas, que pode ser resolvidas usando hash consistente.</p>\n<h3>Cache</h3>\n<p>Podemos armazenar em caches URLs acessados com frequ\u00eancia. Podemos usar qualquer solu\u00e7\u00e3o de prateleira como o <a href=\"https://en.wikipedia.org/wiki/Memcached\">Memcached</a>, que pode armazenar URLs completos com seus respectivos hashes. Assim, os servidores de aplicativos, antes de atingir o armazenamento de back-end, podem verificar rapidamente se o cache possui a URL desejada.</p>\n<p><strong>Quanta mem\u00f3ria cache devemos ter?</strong> Podemos come\u00e7ar com 20% do tr\u00e1fego di\u00e1rio e, com ase nos padr\u00f5es de uso dos clientes, podemos ajustar quantos servidores de cache precisamos. Conforme estimado acima, precisamos de 170-GB de mem\u00f3ria para armazenar em 20% do tr\u00e1fego di\u00e1rio. Como um servidor moderno pode ter 256gb de mem\u00f3ria, podemos facilmente encaixar todo o cache em uma m\u00e1quina. Como alternativa podemos usar alguns servidores para armazenar todas essas URLSs\u00a0quentes.</p>\n<p><strong>Qual pol\u00edtica de remo\u00e7\u00e3o de cache melhor atenderia \u00e0s nossas necessidades?</strong> Quando o cache est\u00e1 cheio e queremos substituir um link por um URL mais recente/mais quente, como escolher\u00edamos? Menos usado recentemente (LRU) pode ser uma pol\u00edtica razo\u00e1vel para o nosso sistema. De acordo com essa pol\u00edtica, descartamos primeiro o URL usado menos recentemente. Podemos usar um Linked Hash Map ou uma estrutura de dados semelhante para armazenar nossas URLs e Hashes, que tamb\u00e9m acompanhar\u00e3o as URLs que foram acessadas recentemente.</p>\n<p>Para aumentar a efici\u00eancia, podemos replicar nossos servidores de cache para distribuir a carga entre\u00a0eles.</p>\n<p><strong>Como cada r\u00e9plica de cache podemos ser atualizada?</strong> Sempre h\u00e1 uma falha de cache, nossos servidores atingem um banco de dados de back-end. Sempre que isso acontecer, podemos atualizar o cache e passar a nova entrada para todas as r\u00e9plicas do cache. Cada r\u00e9plica j\u00e1 tiver essa entrada, ela pode simplesmente ignor\u00e1-la.</p>\n<h3>Load Balance</h3>\n<p>Podemos adicionar uma camada de load balance em tr\u00eas locais em nosso\u00a0sistema:</p>\n<ol>\n<li>Entre Cliente e servidores de aplicativos;</li>\n<li>Entre servidores de aplicativos e servidores de banco de\u00a0dados;</li>\n<li>Entre servidores de aplicativos e servidores de\u00a0cache.</li>\n</ol>\n<p>Inicialmente, poder\u00edamos usar uma abordagem simples de Round Robin que distribui as solicita\u00e7\u00f5es recebidas igualmente entre os servidores de back-end. Este LB \u00e9 simples de implementar e n\u00e3o apresenta nenhuma sobrecarga. Outro benef\u00edcio dessa abordagem \u00e9 que, se um servidor estiver inativo, o LB o retirar\u00e1 da rota\u00e7\u00e3o e interromper\u00e1 o envio de tr\u00e1fego para\u00a0ele.</p>\n<p>Um problema com Round Robin LB \u00e9 que n\u00e3o consideramos a carga do servidor. Como resultado, se um servidor estiver sobrecarregado ou lento, o LB n\u00e3o interrompera o envio de novas solicita\u00e7\u00f5es para esse servidor. Para lidar com isso. uma solu\u00e7\u00e3o LB mais inteligente pode ser colocada que consulta periodicamente o servidor backend sobre sua carga e ajusta o tr\u00e1fego com base\u00a0nisso.</p>\n<h3>Limpeza de Banco de\u00a0dados</h3>\n<p>As entradas devem permanecer para sempre ou devem ser eliminadas? Se um tempo de expira\u00e7\u00e3o especificado pelo usu\u00e1rio for atingido, o que deve acontecer com o\u00a0link?</p>\n<p>Se escolh\u00eassemos procurar continuamente por links expirados para remov\u00ea-los, isso colocaria muita press\u00e3o em nosso banco de dados. Em vez disso, podemos remover lentamente os links expirados e fazer uma limpeza pregui\u00e7osa. Nosso servi\u00e7o garantir\u00e1 que apenas os links expirados sejam exclu\u00eddos, embora alguns links expirados possam durar mais, mas nunca ser\u00e3o devolvidos aos usu\u00e1rios.</p>\n<ol>\n<li>Sempre que um usu\u00e1rio tentar acessar um link expirado, podemos excluir o link e retornar um erro ao\u00a0usu\u00e1rio.</li>\n<li>Um servi\u00e7o de limpeza separado pode ser executado periodicamente para remover links expirados de nosso armazenamento e cache. Esse servi\u00e7o deve ser muito leve e programado para ser executado apenas quando o tr\u00e1fego do usu\u00e1rio for\u00a0baixo.</li>\n<li>Podemos ter um tempo de expira\u00e7\u00e3o padr\u00e3o para cada link (por exemplo, dois anos). Ap\u00f3s remover um link expirado, podemos colocar a chave de volta no key-DB para ser reutilizada.</li>\n<li>Devemos remover links que n\u00e3o s\u00e3o visitados h\u00e1 algum tempo, digamos, seis meses? Isso pode ser complicado. Como o armazenamento est\u00e1 ficando barato, podemos decidir manter os links para\u00a0sempre.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/833/1*Whiqok4SRHk8SCQJrPYOrg.png\"></figure><h3>Conclus\u00e3o</h3>\n<p>Vimos como podemos criar um encurtador de URL de maneira que seja escal\u00e1vel e confi\u00e1vel. Mas algumas dessas ferramentas e tecnologias podem ser aplicado de acordo como o n\u00famero de usu\u00e1rios\u00a0crescem.</p>\n<p>Assim criei um encurtador de URL que pode ser aumentado conforme a aplica\u00e7\u00e3o cresce. E pode ser encontrado <a href=\"https://github.com/rafaelmgr12/mark-url\">aqui</a>.</p>\n<h3>Referencias</h3>\n<ul>\n<li><a href=\"https://www.educative.io/courses/grokking-the-system-design-interview/m2ygV4E81AR\">https://www.educative.io/courses/grokking-the-system-design-interview/m2ygV4E81AR</a></li>\n<li><a href=\"https://medium.com/double-pointer/system-design-interview-url-shortener-c45819b252cd\">https://medium.com/double-pointer/system-design-interview-url-shortener-c45819b252cd</a></li>\n<li><a href=\"https://towardsdatascience.com/system-design-of-url-shortening-service-b325b18c8f88\">https://towardsdatascience.com/system-design-of-url-shortening-service-b325b18c8f88</a></li>\n<li><a href=\"https://medium.com/@sandeep4.verma/system-design-scalable-url-shortener-service-like-tinyurl-106f30f23a82\">https://medium.com/@sandeep4.verma/system-design-scalable-url-shortener-service-like-tinyurl-106f30f23a82</a></li>\n<li><a href=\"https://github.com/Jeevan-kumar-Raj/Grokking-System-Design/blob/master/designs/short-url.md\">https://github.com/Jeevan-kumar-Raj/Grokking-System-Design/blob/master/designs/short-url.md</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ec554470d649\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/830/1*yY_xCZPB6pkwnMrvSAj1Nw.jpeg\"></figure><p>Ol\u00e1, espero que estejam todos bem. Hoje falarei sobre como planejei e executei a cria\u00e7\u00e3o de um encurtador de URL e tamb\u00e9m os pr\u00f3ximos planos para que nosso sistema evolua de maneira saud\u00e1vel. Portanto, passaremos desde dos requisitos funcionais e n\u00e3o funcionas e tamb\u00e9m regra de neg\u00f3cios que nossa aplica\u00e7\u00e3o precisa\u00a0cumprir.</p>\n<h3>O que \u00e9 Encurtador de\u00a0URL?</h3>\n<p>Antes de come\u00e7ar, \u00e9 necess\u00e1rio explicar do que se trata esse tipo de\u00a0servi\u00e7o.</p>\n<p>O objetivo de um encurtador de url \u00e9 bem simples. \u00c9 um servi\u00e7o bem conhecido, como, por exemplo, bit.ly ou tinyurl, que encurtar URL longos para URLs mais simples. Assim os usu\u00e1rios ser\u00e3o redirecionados para a URL original quando acessam esses links curtos. Por exemplo, pegue a seguinte\u00a0URL:</p>\n<pre><a href=\"https://www.linkedin.com/in/rafael-mgr/\">https://www.linkedin.com/in/rafael-mgr/</a></pre>\n<p>Obteremos a seguinte\u00a0link</p>\n<pre><a href=\"https://tinyurl.com/bdfwpx29\">https://tinyurl.com/bdfwpx29</a></pre>\n<p>Como pode ser visto, o link foi diminuiu drasticamente.</p>\n<p>O encurtamento de URL \u00e9 usado para otimizar links entre dispositivos, rastrear links individuais para analisar o p\u00fablico, medir o desempenho de campanhas publicit\u00e1rias ou ocultar URLs originais afiliados.</p>\n<h3>Requisitos funcionais e n\u00e3o funcionais.</h3>\n<p>Podemos seguir e definir quais s\u00e3o os requisitos funcionais e n\u00e3o funcionais e as regras de neg\u00f3cios. Mas antes disso, gostaria de definir o que\u00a0s\u00e3o.</p>\n<h4>Requisitos Funcionais</h4>\n<p>S\u00e3o requisitos que devem ser atendidos e resolvidos pelo software por meio de fun\u00e7\u00f5es ou servi\u00e7os. Alguns exemplos desse tipo de requisitos:</p>\n<ul>\n<li>inserir dados em um formul\u00e1rio</li>\n<li>buscar pratos espec\u00edficos em um card\u00e1pio;</li>\n<li>consultar a situa\u00e7\u00e3o de um\u00a0pedido;</li>\n<li>realizar compras;</li>\n<li>comunicar-se com um atendente;</li>\n<li>alterar informa\u00e7\u00f5es de um registro;</li>\n<li>elaborar relat\u00f3rios.</li>\n</ul>\n<p>Tudo o que for relacionada a uma a\u00e7\u00e3o a ser feita \u00e9 considerado uma fun\u00e7\u00e3o. Tamb\u00e9m \u00e9 importante lembrar que quanto menos amb\u00edguos e mais objetivos forme os requisitos funcionais, maio ser\u00e1 a qualidade do software\u00a0gerado.</p>\n<h4>Requisitos n\u00e3o funcionais</h4>\n<p>Os requisitos n\u00e3o funcionais s\u00e3o todos aqueles relacionados \u00e0 forma como o software tornar\u00e1 realidade os que est\u00e1 sendo planejado. Assim, enquanto requisitos funcionas est\u00e3o focados no que ser\u00e1 feito, os n\u00e3o funcionais descrevem como ser\u00e3o\u00a0feitos.</p>\n<p>Dessa forma, todos os pr\u00e9-requisitos do sistema, de hardware, de software e operacionais s\u00e3o documentados separadamente. Entre as caracter\u00edsticas t\u00e9cnicas que podem ser definidas est\u00e3o:</p>\n<ul>\n<li>tipo de sistema operacional;</li>\n<li>hardware a ser utilizado;</li>\n<li>processamento;</li>\n<li>consumo de\u00a0mem\u00f3ria;</li>\n<li>conex\u00e3o;</li>\n<li>banco de\u00a0dados;</li>\n<li>tipos de dispositivos onde o software pode ser\u00a0usado.</li>\n</ul>\n<p>Al\u00e9m disso, os requisitos n\u00e3o funcionais podem ser categorizados em 3 tipos, requisitos de produto final, organizacional e externo. Contudo, tamb\u00e9m h\u00e1 outras categorias, como:</p>\n<ul>\n<li>de efici\u00eancia;</li>\n<li>de confiabilidade;</li>\n<li>de portabilidade;</li>\n<li>de entrega;</li>\n<li>de implementa\u00e7\u00e3o;</li>\n<li>de padr\u00f5es;</li>\n<li>de inter</li>\n</ul>\n<p>Podemos ir mais afundo nesses quesitos, por\u00e9m foge um pouco do escopo desse artigo. Para saber mais, esse <a href=\"https://mestresdaweb.com.br/tecnologias/requisitos-funcionais-e-nao-funcionais-o-que-sao/#:~:text=O%20que%20s%C3%A3o%20requisitos%20n%C3%A3o,funcionais%20descrevem%20como%20ser%C3%A3o%20feitos.\">link</a> explica com maiores detalhes como podemos definir e separa os requisitos da nossa aplica\u00e7\u00e3o.</p>\n<p>Podemos agora retornar a defini\u00e7\u00f5es de requisitos da nossa aplica\u00e7\u00e3o.</p>\n<p>Nesse primeiro momento, \u00e9 preciso que seja definido os objetivos do nosso sistema, portanto nosso encurtador tem que atender os seguintes requisitos.</p>\n<p><strong>Requisitos Funcionais:</strong></p>\n<ol>\n<li>Dado um URL, nosso sistema tem que gerar um curto e \u00fanico \u201calias\u201d do nome. Esse link dever ser curto o suficiente para ser facilmente copiado e colocas entre aplica\u00e7\u00f5es.</li>\n<li>Quando usu\u00e1rios acessarem o link curto, nosso servi\u00e7o deve redirecionar eles para o link original.</li>\n<li>Usu\u00e1rios devem ter a op\u00e7\u00e3o de pegar um link customizado para seu\u00a0URL</li>\n<li>Os links devem expirar ap\u00f3s um intervalo padr\u00e3o. Os usu\u00e1rios deverem conseguir especificar o tempo de expira\u00e7\u00e3o.</li>\n</ol>\n<p><strong>Requisitos n\u00e3o Funcionais:</strong></p>\n<ol>\n<li>O sistema deve ter altamente dispon\u00edvel. Isso \u00e9 necess\u00e1rio porque, se nosso servi\u00e7o come\u00e7ar a falhar, os redirecionamentos de URL come\u00e7ar\u00e3o a\u00a0falhar.</li>\n<li>O redirecionamento de URL deve acontecer em tempo real com lat\u00eancia\u00a0m\u00ednima.</li>\n<li>Links encurtados n\u00e3o devem ser adivinhados (n\u00e3o previs\u00edveis)</li>\n</ol>\n<p><strong>Requisitos estendidos:</strong></p>\n<ol>\n<li>An\u00e1lise; por exemplo, quantas vezes um redirecionamento aconteceu?</li>\n<li>Nosso servi\u00e7o tamb\u00e9m deve ser acess\u00edvel por meio de APIs REST por outros servi\u00e7os.</li>\n</ol>\n<h3>Tr\u00e1fico e Modelagem da Capacidade</h3>\n<p>Nosso sistema ser\u00e1 usado, majoritariamente, em formato de leitura. Haver\u00e1 mutias solicita\u00e7\u00f5es de redirecionamento em compara\u00e7\u00e3o com novos encurtamentos de URL. Suponhamos de in\u00edcio uma propor\u00e7\u00e3o 100:1 entre leitura e\u00a0escrita.</p>\n<p><strong>Estimativa de tr\u00e1fico:</strong> Assumindo, que teremos total de 500 milh\u00f5es novas encurtamentos de URLs por m\u00eas, com propor\u00e7\u00e3o de leitura/grava\u00e7\u00e3o de 100:1, podemos esperar 50 bilh\u00f5es de redirecionamentos durante o mesmo\u00a0per\u00edodo:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/179/1*LtejIPNTXj4g8_id34ohMA.gif\"></figure><p>Quantas queries por segundo seria feita para nosso sistema? Novos encurtamentos e URLs por\u00a0segundo:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/381/1*mJYO0lL1cIijkJuqIGgp7Q.gif\"></figure><p><strong>Estimativas de armazenamento</strong>: Assumiremos que armazenamos cada solicita\u00e7\u00e3o de encurtamento de URL (e link encurtado associado) por 5 anos. Como esperarmos ter 500 milh\u00f5es de novos URLs armazenados todos os meses, o \u00famero total de objetos que esperarmos armazenar ser\u00e1 de 30\u00a0bilh\u00f5es:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/272/1*89Tqrr9GWbmRK8zbOrvsvg.gif\"></figure><p>Vamos assumir que cada objeto armazenado ser\u00e1 de aproximadamente 500 bytes(apenas uma estimativa aproximada\u200a\u2014\u200avamos investigar mais tarde). Precisaremos de 15 TB de armazenamento total.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/206/1*1fyIfpJ66yNuVRdho9b0EA.gif\"></figure><p><strong>Estimativas de largura de banda(Bandwidth estimates)</strong>\u00a0: Para solicita\u00e7\u00f5es de grava\u00e7\u00e3o, como esperamos 200 novos urls a cada segundo, o total de dados de entrada para nosso servi\u00e7o ser\u00e1 de 100 KB por\u00a0segundo</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/223/1*ErYRCCNcVJbO5HL9YWWotA.gif\"></figure><p>Para solicita\u00e7\u00f5es de leitura, como cada segundo esperamos redirecionamentos de cerca de 20 mil URLs, o total de dados de sa\u00edda para nosso servi\u00e7o seria de 10 MB por\u00a0segundo:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/221/1*WK-Xj0SKXiZqO19nFWl21w.gif\"></figure><p><strong>Estimativas de mem\u00f3ria</strong>: Se quisermos armazenar em cache alguns das URLs quentes acessados com frequ\u00eancia, quanta mem\u00f3ria precisaremos para armazen\u00e1-los? Se seguirmos a regra 80\u201320, o que significa que 20% das URLs geram 80% do tr\u00e1fego, gostar\u00edamos de armazenar em cache esses 20% de URLs\u00a0quentes.</p>\n<p>Como temos 20 mil solicita\u00e7\u00f5es por segundos, receberemos 1,7 bilh\u00e3o de solicita\u00e7\u00f5es por\u00a0dia:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/319/1*ecC94OzRK0_KDkeMlneALg.gif\"></figure><p>Para armazenar em cache 20% dessas solicita\u00e7\u00f5es, precisaremos de 170 GB de\u00a0mem\u00f3ria.</p>\n<p><strong>Estimativas de alto n\u00edvel</strong>: supondo 500 milh\u00f5es de novos URLs por m\u00eas e propor\u00e7\u00e3o de leitura: grava\u00e7\u00e3o de 100:1, a seguir est\u00e1 o resumo das estimativas de alto n\u00edvel para nosso\u00a0servi\u00e7o:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/770/1*MKajaHkhGt1TeE3tokBvcg.png\"></figure><h3>Sistema de\u00a0APIs</h3>\n<p>Podemos ter SOAP ou REST APIs para expor a funcionalidade do nosso servi\u00e7o. A seguir, pode ser as defini\u00e7\u00f5es das APIS para criar e excluir\u00a0URLs:</p>\n<pre>createURL(api_dev_key, original_url, custom_alias=None, user_name=None, expire_date=None)</pre>\n<p><strong>Par\u00e2metros:</strong></p>\n<ul>\n<li>api_dev_key (string): A chave de desenvolvedor da API de uma conta registrada. Isso ser\u00e1 usado para, entre outras coisas, limitar os usu\u00e1rios com base em sua cota\u00a0alocada.</li>\n<li>original_url (string): URL original a ser encurtado.</li>\n<li>custom_alias (string): chave personalizada opcional para a\u00a0URL.</li>\n<li>user_name (string): nome de usu\u00e1rio opcional a ser usado na codifica\u00e7\u00e3o.</li>\n<li>expire_date (string): data de expira\u00e7\u00e3o opcional para a URL abreviada</li>\n</ul>\n<p><strong>Retorno</strong>: (string)</p>\n<p>Uma inser\u00e7\u00e3o bem-sucedida retorna o URL abreviado; caso contr\u00e1rio, ele retornar\u00e1 um c\u00f3digo de\u00a0erro.</p>\n<pre>deleteURL(api_dev_key, url_key)</pre>\n<p>Onde \u201curl_key\u201d \u00e9 uma string que representa a URL abreviada a ser recuperada; uma exclus\u00e3o bem-sucedida retorna \u2018URL removido\u2019.</p>\n<p><strong>Como detectamos e prevenimos o abuso</strong>? Um usu\u00e1rio mal-intencionado pode nos tirar do neg\u00f3cio consumindo todas as chaves de URL no design atual. Para evitar abusos, podemos limitar os usu\u00e1rios por meio da api_dev_key. Cada api_dev_key pode ser limitada a um certo n\u00famero de cria\u00e7\u00f5es e redirecionamentos de URL por algum per\u00edodo (que pode ser definido para uma dura\u00e7\u00e3o diferente por chave de desenvolvedor).</p>\n<h3>Design Database</h3>\n<p>Antes de come\u00e7ar, temos algumas observa\u00e7\u00f5es sobre a natureza dos dados que armazenaremos:</p>\n<ol>\n<li>Precisaremos armazenar bilh\u00f5es de registros.</li>\n<li>Cada Objeto que \u00e9 pequeno (menos de\u00a01K)</li>\n<li>N\u00e3o h\u00e1 relacionamento entres registros., exceto armazena qual usu\u00e1rio criou um\u00a0URL.</li>\n<li>Nosso servi\u00e7o \u00e9 pesado de\u00a0Leitura</li>\n</ol>\n<h3>Esquema(Schema) do\u00a0Database</h3>\n<p>\u00c9 preciso de duas tabelas: uma para armazenar informa\u00e7\u00f5es sobre os mapeamentos de URL e outra para os dados do usu\u00e1rio que criou link\u00a0curto.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/463/0*DUlOWL9jCySbXFse.png\"></figure><p>Esquema de banco de dados de encurtamento de\u00a0URL</p>\n<p>Que tipo de banco de dados devemos usar? Como antecipamos o armazenamento de bilh\u00f5es de linhas e n\u00e3o precisamos usar relacionamentos entre objetos\u200a\u2014\u200aum armazenamento NoSQL como DynamoDB, Cassandra ou Riak \u00e9 uma escolha melhor. Uma escolha NoSQL tamb\u00e9m seria mais f\u00e1cil de escalar. Consulte SQL vs NoSQL para obter mais detalhes.</p>\n<h3>Design B\u00e1sico de Sistema e Algoritmo</h3>\n<p>O problema que estamos resolvendo \u00e9 como gerar um curta e chave \u00fanica para uma determinada URL.</p>\n<p>O exemplo dado para o caso TinyURL, a URL abreviada \u00e9 \u201c<a href=\"https://tinyurl.com/rxcsyr3r%E2%80%9D\">https://tinyurl.com/rxcsyr3r\u201d</a>. Os \u00faltimos oito caracteres desta URL constituem a chave curta que queremos gerar. Exploremos duas solu\u00e7\u00f5es\u00a0aqui:</p>\n<h3>1. Codificando a\u00a0URL</h3>\n<p>Podemos calcular um hash exclusivo (por exemplo, um MD5 ou SHA256, etc\u00a0...) do URL fornecido. O hash pode ent\u00e3o ser codificado para exibi\u00e7\u00e3o. Essa codifica\u00e7\u00e3o pode ser base36 ([a-z\u00a0,0\u20139]) ou base62 ([A-Z, a-z, 0\u20139]) e se adicionarmos \u2018+\u2019 e \u2018/\u2019 podemos usar a codifica\u00e7\u00e3o Base64. Uma pergunta razo\u00e1vel seria: qual deve ser o comprimento da tecla curta? 6, 8 ou 10 caracteres?</p>\n<p>Usando a codifica\u00e7\u00e3o base64, uma chave de 6 letras resultaria 68,7 bilh\u00f5es de strings poss\u00edveis. Usando a codifica\u00e7\u00e3o base64, uma chave de 8 letras resultaria em 281 trilh\u00f5es de strings poss\u00edveis.</p>\n<p>Com 68,7 bilh\u00f5es de strings \u00fanicas, suponhamos que seis letras seria suficiente para o nosso\u00a0sistema.</p>\n<p>Se usarmos o algoritmo MD5 como nossa fun\u00e7\u00e3o de hash, ele produzir\u00e1 um valor de hash de 128 bits. Ap\u00f3s a codifica\u00e7\u00e3o base64, obteremos uma string com mais de 21 caracteres (j\u00e1 que cada caracteres base64 codifica 6 bits do valor de hash). Agora s\u00f3 temos espa\u00e7o para 6 (ou 8) caracteres por tecla curta, como vamos escolher nossa chave ent\u00e3o? Podemos pegar as primeiras 6 (ou*) letras para a chave. Isso pode resultar em duplica\u00e7\u00e3o de chaves; para resolver isso, podemos escolher alguns outros caracteres da string de codifica\u00e7\u00e3o ou trocar alguns caracteres.</p>\n<p>Quais s\u00e3o os diferentes problemas com a nossa solu\u00e7\u00e3o? Temos os seguintes problemas como nosso esquema de codifica\u00e7\u00e3o:</p>\n<ol>\n<li>Se v\u00e1rios usu\u00e1rios inserirem o mesmo URL, eles poder\u00e3o obter o mesmo URL abreviado, o que n\u00e3o \u00e9 aceit\u00e1vel.</li>\n<li>E se partes do URL forem codificadas por URL? por exemplo, <a href=\"http://www.educative.io/distributed.php?id=design\">http://www.educative.io/distributed.php?id=design</a> e <a href=\"http://www.educative.io/distributed.php%3Fid%3Ddesign\">http://www.educative.io/distributed.php%3Fid%3Ddesign</a> s\u00e3o id\u00eanticos, exceto pela codifica\u00e7\u00e3o de\u00a0URL.</li>\n</ol>\n<p><strong>Solu\u00e7\u00e3o alternativa para os problemas</strong>: podemos anexar um n\u00famero de sequ\u00eancias crescente a cada URL de entrada para torn\u00e1-lo exclusivo e, em seguida, gerar seu hash. No entanto, n\u00e3o precisamos armazenar esse n\u00famero de sequ\u00eancias nos bancos de dados Poss\u00edveis problemas com essa abordagem podem se um n\u00famero de sequ\u00eancias crescentes. Pode transbordar? Acrescentar um n\u00famero de sequ\u00eancia crescente tamb\u00e9m afetar\u00e1 o desempenho do\u00a0servi\u00e7o.</p>\n<p>Outra solu\u00e7\u00e3o pode ser anexar o ID do usu\u00e1rio (que deve ser exclusivo) ao URL de entrada. No entanto, se o usu\u00e1rio n\u00e3o tiver feito login, ter\u00edamos que pedir ao usu\u00e1rio que escolhesse uma chave de exclusividade. Mesmo depois disso, se tivermos um conflito, teremos que continuar gerando uma chave at\u00e9 obtermos uma\u00a0\u00fanica.</p>\n<h3>2. Gerando Chaves\u00a0offline</h3>\n<p>Podemos ter um <strong>Key Generation Service (KGS)</strong> aut\u00f4nomo que gera strings aleat\u00f3rias de seis letras antecipadamente e as armazena em um banco de dados (vamos cham\u00e1-lo de key-db). Sempre que quisermos encurtar uma URL, pegaremos uma das chaves j\u00e1 geradas e a usaremos. Essa abordagem tornar\u00e1 as coais bastantes simples e r\u00e1pidas. N\u00e3o apenas n\u00e3o estamos codificando a URL, mas tamb\u00e9m n\u00e3o teremos que nos preocupar com duplica\u00e7\u00f5es ou colis\u00f5es. KGS ir\u00e1 certificar-se de que todas as chaves inseridas no key-DB sejam\u00a0\u00fanicas.</p>\n<p><strong>A concorr\u00eancia pode causar problemas?</strong> Assim que uma chave for usada, ela deve ser marcada no banco de dados para garantir que n\u00e3o seja usada novamente. Se houver v\u00e1rios servidores lendo chaves simultaneamente, poderemos obter um cen\u00e1rio em que dois ou mais servidores tentem ler a mesma chave do banco de dados. Como podemos resolver esse problema de simultaneidade?</p>\n<p>Os servidores podem usar o KGS para ler/marcar chaves no banco de dados. KGS pode usar duas tabelas para armazenar chaves: uma para chaves que ainda n\u00e3o foram usadas e outra para todas as chaves usadas. Assim que o KGS entrega as chaves a um dos servidores, ele pode mov\u00ea-las para a tabela de chaves usadas. O KGS sempre pode manter algumas chaves na mem\u00f3ria para fornec\u00ea-las rapidamente sempre que um servidor precisar\u00a0delas.</p>\n<p>Para simplificar, assim que o KGS carrega algumas chaves na mem\u00f3ria, ele pode mov\u00ea-las para a tabela de chaves usadas. Isso garante que cada servidor obtenha chaves exclusivas. Se o KGS morrer antes de atribuir todas as chaves carregadas a algum servidor, estaremos desperdi\u00e7ando essas chaves\u200a\u2014\u200ao que pode ser aceit\u00e1vel, dado o grande n\u00famero de chaves que\u00a0temos.</p>\n<p>O KGS tamb\u00e9m deve certificar-se de n\u00e3o fornecer a mesma chave para v\u00e1rios servidores. Para isso, ele deve sincronizar (ou bloquear) a estrutura de dados que cont\u00e9m as chaves antes de remover as chaves e entreg\u00e1-las a um servidor.</p>\n<p><strong>Qual seria o tamanho do banco de dados de chave?</strong> Com a codifica\u00e7\u00e3o base64, podemos gerar 68,7B chaves exclusivas de seis letras. Se precisarmos de um byte para armazenar um caractere alfanum\u00e9rico, podemos armazenar todas essas chaves\u00a0em:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/705/1*C09XJHEWPQrG10mi6pQcqQ.png\"></figure><p><strong>A KGS n\u00e3o \u00e9 um ponto \u00fanico de falha?</strong> \u00c9 sim para resolver isso, podemos ter r\u00e9plica em espera do KGS. Sempre que o servidor prim\u00e1rio morre, o servidor em esperar pode assumir o controle para gerar e fornecer\u00a0chaves.</p>\n<p><strong>Cada servidor de aplicativos pode armazenar em cache algumas chaves do key-db?</strong> Sim, isso certamente pode acelerar as coisas. Embora neste caso, se o servidor de aplicativos morrer antes de consumir todas as chaves, acabaremos perdendo essas chaves. Isso pode ser aceit\u00e1vel, pois temos 68B teclas exclusivas de seis\u00a0letras.</p>\n<p><strong>Como realizar\u00edamos uma pesquisa de chave?</strong> Podemos procurar a chave em nosso banco de dados para obter o URL completo. Se estiver presente no banco de dados, emita um status \u201cHTTP 302 Redirect\u201d de volta ao navegador, passando a URL armazenada no campo \u201cLocation\u201d da solicita\u00e7\u00e3o. Se essa chave n\u00e3o estiver presente em nosso sistema, emita um status \u201cHTTP 404 Not Found\u201d ou redirecione o usu\u00e1rio de volta para a p\u00e1gina\u00a0inicial.</p>\n<p><strong>Devemos impor limites de tamanho aos aliases personalizados?</strong> Nosso servi\u00e7o oferece suporte a aliases personalizados. Os usu\u00e1rios podem escolher qualquer \u2018chave\u2019 que quiserem, mas fornecer um alias personalizado n\u00e3o \u00e9 obrigat\u00f3rio. No entanto, \u00e9 razo\u00e1vel (e muitas vezes desej\u00e1vel) impor um limite de tamanho em um alias personalizado para garantir que tenhamos um banco de dados de URL consistente. Suponhamos que os usu\u00e1rios especifiquem no m\u00e1ximo 16 caracteres por chave de cliente (conforme refletido no esquema de banco de dados\u00a0acima).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/767/1*skvMqInVYEsTAJtzu5-5Qw.png\"></figure><h3>Particionamento de Dados e Replica\u00e7\u00e3o</h3>\n<p>Para ser poss\u00edvel escalar o banco de dados, precisamos particion\u00e1-lo para poder armazenar informa\u00e7\u00f5es sobre bilh\u00f5es de URLs. Portanto, precisamos desenvolver um esquema de particionamento que divide e armazene nossos dados em diferentes servidores de banco de\u00a0dados.</p>\n<h3>1. Particionamento baseado em intervalo</h3>\n<p>Podemos armazene URLs em parti\u00e7\u00f5es separadas como a primeira letra da chave de hash. Portanto, salvaremos todas as chaves de hash de URL come\u00e7ando com a letra \u2018A\u2019 (e \u2018a\u2019) em uma parti\u00e7\u00e3o, salvaremos aquelas que come\u00e7am com a letra \u2018B\u2019 em outra parti\u00e7\u00e3o e assim por diante. Essa abordagem \u00e9 chamada de particionamento baseado em intervalo. Podemos at\u00e9 combinar certas letras que ocorrem com menos frequ\u00eancia em uma parti\u00e7\u00e3o de banco de dados. Assim, devemos desenvolver um esquema de particionamento est\u00e1tico para sempre armazenar/encontrar uma URL de maneira previs\u00edvel.</p>\n<p>O principal problema com essa abordagem \u00e9 que ela pode levar a servidores de banco de dados desbalanceados. Por exemplo, decidimos colocar todas as URLs que come\u00e7am com a letra \u2018E\u2019 em uma parti\u00e7\u00e3o de banco de dados, mas depois percebemos que temos muitas URLs que come\u00e7am com a letra\u00a0\u2018E\u2019.</p>\n<h3>2. Particionamento Baseado em\u00a0Hash.</h3>\n<p>Neste esquema, pegamos um hash do objeto que estamos armazenando. Em seguida calculamos qual participa\u00e7\u00e3o usar com base hash. No nosso caso, podemos pegar o hash da chave ou link curto para determinar a participa\u00e7\u00e3o na qual armazenados o objeto de\u00a0dados.</p>\n<p>Nossa fun\u00e7\u00e3o de hash distribuir\u00e1 URLs aleatoriamente em diferentes parti\u00e7\u00f5es(por exemplo, nossa fun\u00e7\u00e3o de hash pode sempre mapear qualquer \u2018chave\u2019 para um n\u00famero entre [1,\u2026,256]). Esse n\u00famero representaria a parti\u00e7\u00e3o na qual armazenamos nosso\u00a0objeto.</p>\n<p>Essa abordagem ainda levar a parti\u00e7\u00f5es sobrecarregadas, que pode ser resolvidas usando hash consistente.</p>\n<h3>Cache</h3>\n<p>Podemos armazenar em caches URLs acessados com frequ\u00eancia. Podemos usar qualquer solu\u00e7\u00e3o de prateleira como o <a href=\"https://en.wikipedia.org/wiki/Memcached\">Memcached</a>, que pode armazenar URLs completos com seus respectivos hashes. Assim, os servidores de aplicativos, antes de atingir o armazenamento de back-end, podem verificar rapidamente se o cache possui a URL desejada.</p>\n<p><strong>Quanta mem\u00f3ria cache devemos ter?</strong> Podemos come\u00e7ar com 20% do tr\u00e1fego di\u00e1rio e, com ase nos padr\u00f5es de uso dos clientes, podemos ajustar quantos servidores de cache precisamos. Conforme estimado acima, precisamos de 170-GB de mem\u00f3ria para armazenar em 20% do tr\u00e1fego di\u00e1rio. Como um servidor moderno pode ter 256gb de mem\u00f3ria, podemos facilmente encaixar todo o cache em uma m\u00e1quina. Como alternativa podemos usar alguns servidores para armazenar todas essas URLSs\u00a0quentes.</p>\n<p><strong>Qual pol\u00edtica de remo\u00e7\u00e3o de cache melhor atenderia \u00e0s nossas necessidades?</strong> Quando o cache est\u00e1 cheio e queremos substituir um link por um URL mais recente/mais quente, como escolher\u00edamos? Menos usado recentemente (LRU) pode ser uma pol\u00edtica razo\u00e1vel para o nosso sistema. De acordo com essa pol\u00edtica, descartamos primeiro o URL usado menos recentemente. Podemos usar um Linked Hash Map ou uma estrutura de dados semelhante para armazenar nossas URLs e Hashes, que tamb\u00e9m acompanhar\u00e3o as URLs que foram acessadas recentemente.</p>\n<p>Para aumentar a efici\u00eancia, podemos replicar nossos servidores de cache para distribuir a carga entre\u00a0eles.</p>\n<p><strong>Como cada r\u00e9plica de cache podemos ser atualizada?</strong> Sempre h\u00e1 uma falha de cache, nossos servidores atingem um banco de dados de back-end. Sempre que isso acontecer, podemos atualizar o cache e passar a nova entrada para todas as r\u00e9plicas do cache. Cada r\u00e9plica j\u00e1 tiver essa entrada, ela pode simplesmente ignor\u00e1-la.</p>\n<h3>Load Balance</h3>\n<p>Podemos adicionar uma camada de load balance em tr\u00eas locais em nosso\u00a0sistema:</p>\n<ol>\n<li>Entre Cliente e servidores de aplicativos;</li>\n<li>Entre servidores de aplicativos e servidores de banco de\u00a0dados;</li>\n<li>Entre servidores de aplicativos e servidores de\u00a0cache.</li>\n</ol>\n<p>Inicialmente, poder\u00edamos usar uma abordagem simples de Round Robin que distribui as solicita\u00e7\u00f5es recebidas igualmente entre os servidores de back-end. Este LB \u00e9 simples de implementar e n\u00e3o apresenta nenhuma sobrecarga. Outro benef\u00edcio dessa abordagem \u00e9 que, se um servidor estiver inativo, o LB o retirar\u00e1 da rota\u00e7\u00e3o e interromper\u00e1 o envio de tr\u00e1fego para\u00a0ele.</p>\n<p>Um problema com Round Robin LB \u00e9 que n\u00e3o consideramos a carga do servidor. Como resultado, se um servidor estiver sobrecarregado ou lento, o LB n\u00e3o interrompera o envio de novas solicita\u00e7\u00f5es para esse servidor. Para lidar com isso. uma solu\u00e7\u00e3o LB mais inteligente pode ser colocada que consulta periodicamente o servidor backend sobre sua carga e ajusta o tr\u00e1fego com base\u00a0nisso.</p>\n<h3>Limpeza de Banco de\u00a0dados</h3>\n<p>As entradas devem permanecer para sempre ou devem ser eliminadas? Se um tempo de expira\u00e7\u00e3o especificado pelo usu\u00e1rio for atingido, o que deve acontecer com o\u00a0link?</p>\n<p>Se escolh\u00eassemos procurar continuamente por links expirados para remov\u00ea-los, isso colocaria muita press\u00e3o em nosso banco de dados. Em vez disso, podemos remover lentamente os links expirados e fazer uma limpeza pregui\u00e7osa. Nosso servi\u00e7o garantir\u00e1 que apenas os links expirados sejam exclu\u00eddos, embora alguns links expirados possam durar mais, mas nunca ser\u00e3o devolvidos aos usu\u00e1rios.</p>\n<ol>\n<li>Sempre que um usu\u00e1rio tentar acessar um link expirado, podemos excluir o link e retornar um erro ao\u00a0usu\u00e1rio.</li>\n<li>Um servi\u00e7o de limpeza separado pode ser executado periodicamente para remover links expirados de nosso armazenamento e cache. Esse servi\u00e7o deve ser muito leve e programado para ser executado apenas quando o tr\u00e1fego do usu\u00e1rio for\u00a0baixo.</li>\n<li>Podemos ter um tempo de expira\u00e7\u00e3o padr\u00e3o para cada link (por exemplo, dois anos). Ap\u00f3s remover um link expirado, podemos colocar a chave de volta no key-DB para ser reutilizada.</li>\n<li>Devemos remover links que n\u00e3o s\u00e3o visitados h\u00e1 algum tempo, digamos, seis meses? Isso pode ser complicado. Como o armazenamento est\u00e1 ficando barato, podemos decidir manter os links para\u00a0sempre.</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/833/1*Whiqok4SRHk8SCQJrPYOrg.png\"></figure><h3>Conclus\u00e3o</h3>\n<p>Vimos como podemos criar um encurtador de URL de maneira que seja escal\u00e1vel e confi\u00e1vel. Mas algumas dessas ferramentas e tecnologias podem ser aplicado de acordo como o n\u00famero de usu\u00e1rios\u00a0crescem.</p>\n<p>Assim criei um encurtador de URL que pode ser aumentado conforme a aplica\u00e7\u00e3o cresce. E pode ser encontrado <a href=\"https://github.com/rafaelmgr12/mark-url\">aqui</a>.</p>\n<h3>Referencias</h3>\n<ul>\n<li><a href=\"https://www.educative.io/courses/grokking-the-system-design-interview/m2ygV4E81AR\">https://www.educative.io/courses/grokking-the-system-design-interview/m2ygV4E81AR</a></li>\n<li><a href=\"https://medium.com/double-pointer/system-design-interview-url-shortener-c45819b252cd\">https://medium.com/double-pointer/system-design-interview-url-shortener-c45819b252cd</a></li>\n<li><a href=\"https://towardsdatascience.com/system-design-of-url-shortening-service-b325b18c8f88\">https://towardsdatascience.com/system-design-of-url-shortening-service-b325b18c8f88</a></li>\n<li><a href=\"https://medium.com/@sandeep4.verma/system-design-scalable-url-shortener-service-like-tinyurl-106f30f23a82\">https://medium.com/@sandeep4.verma/system-design-scalable-url-shortener-service-like-tinyurl-106f30f23a82</a></li>\n<li><a href=\"https://github.com/Jeevan-kumar-Raj/Grokking-System-Design/blob/master/designs/short-url.md\">https://github.com/Jeevan-kumar-Raj/Grokking-System-Design/blob/master/designs/short-url.md</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ec554470d649\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["software-development","system-design-concepts"]},{"title":"O Que \u00e9 TCP/IP?","pubDate":"2023-01-23 12:26:43","link":"https://medium.com/@rgribeiro/o-que-%C3%A9-tcp-ip-bbd36bea7c0b?source=rss-303f8669abf9------2","guid":"https://medium.com/p/bbd36bea7c0b","author":"Rafael Ribeiro","thumbnail":"https://cdn-images-1.medium.com/max/1024/0*KqEHVB_VJX0_4c_e","description":"\n<h4>Um breve resumo sobre o que \u00e9 o protocolo TCP/IP.</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*KqEHVB_VJX0_4c_e\"><figcaption>Photo by <a href=\"https://unsplash.com/@jordanharrison?utm_source=medium&amp;utm_medium=referral\">Jordan Harrison</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Durante uma busca pela internet por algum de desafio, acabei me deparando com a seguinte proposta.</p>\n<h4>Criar um sistema de comunica\u00e7\u00e3o com o protocolo TCP.</h4>\n<p>Onde n\u00e3o \u00e9 permitido e usar outro m\u00e9todo de comunica\u00e7\u00e3o como HTTP ou WebSocket. E usar a linguagem de programa\u00e7\u00e3o em Go para criar um servidor e cliente onde a comunica\u00e7\u00e3o ser\u00e1 dado pelo protocolo TCP.</p>\n<p><strong>Requisitos</strong></p>\n<ul>\n<li>Criar um servidor TCP que escuta numa porta especificada por uma vari\u00e1vel de ambiente\u00a0PORT</li>\n<li>Criar um cliente TCP que se conecta a um servidor.</li>\n<li>Quando um cliente se conecta ao servidor, um id \u00fanico \u00e9 gerado e enviado de volta ao\u00a0cliente.</li>\n<li>O cliente pode enviar mensagens com tr\u00eas\u00a0dados:</li>\n<li>id\u200a\u2014\u200ao id do cliente (obrigat\u00f3rio)</li>\n<li>action\u200a\u2014\u200auma a\u00e7\u00e3o esperada pelo servidor (obrigat\u00f3rio)</li>\n<li>body\u200a\u2014\u200aqualquer dado (json, texto puro, tanto faz) que um cliente deseja envivar para o servidor (opcional)</li>\n<li>Quando o cliente envia uma mensagem com action LIST o servidor deve retornar uma lista de todos os ids de clientes conectados.</li>\n<li>Quando o cliente envia uma mensagem com action RELAY o servidor deve enviar a mensagem do campo body para todos os clientes conectados.</li>\n</ul>\n<p><strong>Assim fiquei me perguntando o que a final seria esse protocolo?</strong> Dessa forma, achei interessante fazer escrever um resumo sobre e tentar explicar como funcion\u00e1rio um c\u00f3digo dessa forma para ser poss\u00edvel.</p>\n<p>O protocolo TCP/IP \u00e9 um conjunto de regras e padr\u00f5es que governam a comunica\u00e7\u00e3o de dados na Internet e em redes privadas baseadas em IP. Ele \u00e9 composto por dois protocolos principais: o <strong>TCP (Transmission Control Protocol) e o IP (Internet Protocol).</strong></p>\n<p>O TCP \u00e9 respons\u00e1vel por garantir que as informa\u00e7\u00f5es sejam transmitidas de forma confi\u00e1vel e correta, enquanto o IP \u00e9 respons\u00e1vel por garantir que as informa\u00e7\u00f5es cheguem ao destino correto. Juntos, esses protocolos permitem que dispositivos em diferentes redes se comuniquem entre\u00a0si.</p>\n<p><strong>TCP </strong>\u00e9 um protocolo orientado a conex\u00e3o, ou seja, antes de iniciar a comunica\u00e7\u00e3o entre dispositivos, \u00e9 estabelecida uma conex\u00e3o l\u00f3gica sendo garantida a confiabilidade na transmiss\u00e3o, ele tamb\u00e9m \u00e9 respons\u00e1vel por controlar o fluxo de dados, retransmitir pacotes perdidos e garantir a ordena\u00e7\u00e3o correta dos\u00a0pacotes.</p>\n<p><strong>J\u00e1 o IP \u00e9 um protocolo orientado a pacote, ele \u00e9 respons\u00e1vel por identificar e endere\u00e7ar os dispositivos na rede, al\u00e9m de encaminhar os pacotes de dados ao destino\u00a0correto.</strong></p>\n<p>Juntos, esses dois protocolos permitem que os dispositivos em uma rede se comuniquem entre si e que os dados viajem de forma confi\u00e1vel e precisa atrav\u00e9s da Internet e outras redes baseadas em\u00a0IP.</p>\n<h4>Como funciona?</h4>\n<p>As conex\u00f5es TCP funcionam atrav\u00e9s de um processo chamado de \u201chandshake\u201d de tr\u00eas etapas. O handshake de tr\u00eas etapas \u00e9 um processo que estabelece uma conex\u00e3o entre dois dispositivos em uma rede antes que qualquer dado seja trocado. O processo consiste em tr\u00eas\u00a0etapas:</p>\n<ol>\n<li>O dispositivo iniciador, conhecido como cliente, envia um pacote com a bandeira SYN (sincronizar) para o dispositivo de destino, conhecido como servidor. Este pacote \u00e9 chamado de pacote SYN e serve como uma solicita\u00e7\u00e3o para iniciar uma\u00a0conex\u00e3o.</li>\n<li>O servidor recebe o pacote SYN e responde com um pacote com as bandeiras SYN e ACK (confirmar) configuradas. Este pacote \u00e9 chamado de pacote SYN-ACK e serve como uma confirma\u00e7\u00e3o da solicita\u00e7\u00e3o do cliente para iniciar uma\u00a0conex\u00e3o.</li>\n<li>O cliente recebe o pacote SYN-ACK e envia um pacote com apenas a bandeira ACK configurada. Este pacote \u00e9 chamado de pacote ACK e serve como uma confirma\u00e7\u00e3o final do estabelecimento da\u00a0conex\u00e3o.</li>\n</ol>\n<p>Neste ponto, a conex\u00e3o \u00e9 estabelecida e os dados podem ser trocados entre o cliente e o servidor. Uma vez que a transfer\u00eancia de dados est\u00e1 completa, qualquer lado pode iniciar a finaliza\u00e7\u00e3o da conex\u00e3o, o que \u00e9 feito atrav\u00e9s de um processo semelhante de enviar pacotes com a bandeira FIN (finalizar). Este processo \u00e9 chamado de \u201chandshake\u201d de quatro etapas sendo usado para fechar a\u00a0conex\u00e3o.</p>\n<h4>C\u00f3digo em\u00a0GO</h4>\n<p>Para fazer esse teste de conceito eu crie um simples c\u00f3digo em GO que pode se encontrado <a href=\"https://github.com/rafaelmgr12/simple-tcp-server\">aqui</a>.</p>\n<p>Neste projeto simples, foi desenvolvido um servidor que utiliza o protocolo TCP e fica escutando quando um cliente se conecta. Dessa forma, \u00e9 poss\u00edvel se comunicar com o servidor, enviando e/ou recebendo dados.</p>\n<p>Al\u00e9m disso, devido \u00e0 facilidade de lidar com concorr\u00eancia na linguagem Go, este c\u00f3digo consegue gerenciar eficazmente v\u00e1rios clientes conectados simultaneamente ao nosso servidor.</p>\n<h3><strong>De volta para o\u00a0desafio</strong></h3>\n<p>Com esse tutorial feito podemos modificar para ser poss\u00edvel implementar os requisitos propostos pelo\u00a0desafio.</p>\n<p>Eu dividi o trabalho em algumas partes,\u00a0segue:</p>\n<ol>\n<li>Criar um servidor TCP que escuta na porta especificada por uma vari\u00e1vel de ambiente PORT: Utilize a biblioteca net do Go para criar um servidor TCP que escuta na porta especificada.</li>\n<li>Criar um cliente TCP que se conecta a um servidor: Utilize a biblioteca net do Go para criar um cliente TCP que se conecta ao servidor.</li>\n<li>Gerar um id \u00fanico para cada cliente que se conecta ao servidor: crie um m\u00e9todo para gerar um id \u00fanico para cada cliente que se conecta ao servidor. Envie este id de volta ao cliente quando ele se conectar.</li>\n<li>Implementar a\u00e7\u00f5es esperadas pelo servidor: Para as a\u00e7\u00f5es esperadas pelo servidor, como \u201cLIST\u201d e \u201cRELAY\u201d, implemente as l\u00f3gicas necess\u00e1rias para que o servidor possa processar essas\u00a0a\u00e7\u00f5es.</li>\n<li>Enviar e receber dados entre cliente e servidor: utilize a biblioteca io do Go para enviar e receber dados entre o cliente e o servidor.</li>\n</ol>\n<p>O primeiro passo \u00e9 simples: algumas modifica\u00e7\u00f5es simples no tutorial s\u00e3o necess\u00e1rias, especificamente definir uma vari\u00e1vel de ambiente para a porta do servidor e fazer o mesmo para o cliente. Assim, o primeiro requisito est\u00e1\u00a0pronto.</p>\n<p>Agora, geraremos um ID \u00fanico. Escolhi gerar a partir de um UUID e para isso usei a biblioteca do Google chamada UUID (o link das bibliotecas usadas est\u00e1 no meu reposit\u00f3rio). Em seguida, basta enviar o ID para o cliente quando ele se conectar \u00e0 aplica\u00e7\u00e3o.</p>\n<p>A configura\u00e7\u00e3o de envio e recebimento foi feita com as bibliotecas net e io, bibliotecas padr\u00e3o do Go. Essa parte foi um pouco complicada; o c\u00f3digo precisa ser melhorado para ser mais leg\u00edvel e\u00a0limpo.</p>\n<p>Por \u00faltimo, implementamos os m\u00e9todos \u201cLIST\u201d e \u201cRELAY\u201d. Para ambos, foi necess\u00e1rio usar a estrutura de dados de hashmap para mapear o ID e o endere\u00e7o da conex\u00e3o do cliente. Ent\u00e3o, basta configurar alguns switch case para executar os\u00a0m\u00e9todos.</p>\n<p>Para ter algum m\u00e9todo de autentica\u00e7\u00e3o, tamb\u00e9m implementei um m\u00e9todo simples, onde o cliente precisa enviar o ID gerado pelo servidor de volta para ser poss\u00edvel acessar os m\u00e9todos requisitados.</p>\n<p><strong>Conclus\u00e3o</strong></p>\n<p>\u00c9 a primeira vez que fiz uma implementa\u00e7\u00e3o de um servidor/cliente usando o protocolo TCP. Portanto, tive que pesquisar e estudar sobre o que \u00e9 e definir alguns pontos para come\u00e7ar. Como desenvolvi isso em apenas 3 dias e sem nunca ter visto esse tipo de protocolo, ainda n\u00e3o consegui chegar no padr\u00e3o de qualidade de c\u00f3digo que eu desejo. H\u00e1 alguns problemas de design, mas a refatora\u00e7\u00e3o pode ser feita mais tarde. Esse desafio foi bem dif\u00edcil, j\u00e1 que me tirou da minha zona de conforto, mas acho que foi legal aprender mais sobre redes e protocolos.</p>\n<p>O reposit\u00f3rio do projeto est\u00e1\u00a0aqui:</p>\n<p><a href=\"https://github.com/rafaelmgr12/syscom-tcp\">GitHub - rafaelmgr12/syscom-tcp</a></p>\n<h3>Refer\u00eancias:</h3>\n<p><a href=\"https://www.golinuxcloud.com/golang-tcp-server-client/\">Golang TCP Server and Client Example [Tutorial] | GoLinuxCloud</a></p>\n<p><a href=\"http://www.inanzzz.com/index.php/post/j3n1/creating-a-concurrent-tcp-client-and-server-example-with-golang\">Creating a concurrent TCP client and server example with\u00a0Golang</a></p>\n<p><a href=\"https://www.linode.com/docs/guides/developing-udp-and-tcp-clients-and-servers-in-go/\">Create a TCP and UDP Client and Server using\u00a0Go</a></p>\n<p><a href=\"https://systembash.com/a-simple-go-tcp-server-and-tcp-client/\">A Simple Go TCP Server and TCP\u00a0Client</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bbd36bea7c0b\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h4>Um breve resumo sobre o que \u00e9 o protocolo TCP/IP.</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*KqEHVB_VJX0_4c_e\"><figcaption>Photo by <a href=\"https://unsplash.com/@jordanharrison?utm_source=medium&amp;utm_medium=referral\">Jordan Harrison</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>Durante uma busca pela internet por algum de desafio, acabei me deparando com a seguinte proposta.</p>\n<h4>Criar um sistema de comunica\u00e7\u00e3o com o protocolo TCP.</h4>\n<p>Onde n\u00e3o \u00e9 permitido e usar outro m\u00e9todo de comunica\u00e7\u00e3o como HTTP ou WebSocket. E usar a linguagem de programa\u00e7\u00e3o em Go para criar um servidor e cliente onde a comunica\u00e7\u00e3o ser\u00e1 dado pelo protocolo TCP.</p>\n<p><strong>Requisitos</strong></p>\n<ul>\n<li>Criar um servidor TCP que escuta numa porta especificada por uma vari\u00e1vel de ambiente\u00a0PORT</li>\n<li>Criar um cliente TCP que se conecta a um servidor.</li>\n<li>Quando um cliente se conecta ao servidor, um id \u00fanico \u00e9 gerado e enviado de volta ao\u00a0cliente.</li>\n<li>O cliente pode enviar mensagens com tr\u00eas\u00a0dados:</li>\n<li>id\u200a\u2014\u200ao id do cliente (obrigat\u00f3rio)</li>\n<li>action\u200a\u2014\u200auma a\u00e7\u00e3o esperada pelo servidor (obrigat\u00f3rio)</li>\n<li>body\u200a\u2014\u200aqualquer dado (json, texto puro, tanto faz) que um cliente deseja envivar para o servidor (opcional)</li>\n<li>Quando o cliente envia uma mensagem com action LIST o servidor deve retornar uma lista de todos os ids de clientes conectados.</li>\n<li>Quando o cliente envia uma mensagem com action RELAY o servidor deve enviar a mensagem do campo body para todos os clientes conectados.</li>\n</ul>\n<p><strong>Assim fiquei me perguntando o que a final seria esse protocolo?</strong> Dessa forma, achei interessante fazer escrever um resumo sobre e tentar explicar como funcion\u00e1rio um c\u00f3digo dessa forma para ser poss\u00edvel.</p>\n<p>O protocolo TCP/IP \u00e9 um conjunto de regras e padr\u00f5es que governam a comunica\u00e7\u00e3o de dados na Internet e em redes privadas baseadas em IP. Ele \u00e9 composto por dois protocolos principais: o <strong>TCP (Transmission Control Protocol) e o IP (Internet Protocol).</strong></p>\n<p>O TCP \u00e9 respons\u00e1vel por garantir que as informa\u00e7\u00f5es sejam transmitidas de forma confi\u00e1vel e correta, enquanto o IP \u00e9 respons\u00e1vel por garantir que as informa\u00e7\u00f5es cheguem ao destino correto. Juntos, esses protocolos permitem que dispositivos em diferentes redes se comuniquem entre\u00a0si.</p>\n<p><strong>TCP </strong>\u00e9 um protocolo orientado a conex\u00e3o, ou seja, antes de iniciar a comunica\u00e7\u00e3o entre dispositivos, \u00e9 estabelecida uma conex\u00e3o l\u00f3gica sendo garantida a confiabilidade na transmiss\u00e3o, ele tamb\u00e9m \u00e9 respons\u00e1vel por controlar o fluxo de dados, retransmitir pacotes perdidos e garantir a ordena\u00e7\u00e3o correta dos\u00a0pacotes.</p>\n<p><strong>J\u00e1 o IP \u00e9 um protocolo orientado a pacote, ele \u00e9 respons\u00e1vel por identificar e endere\u00e7ar os dispositivos na rede, al\u00e9m de encaminhar os pacotes de dados ao destino\u00a0correto.</strong></p>\n<p>Juntos, esses dois protocolos permitem que os dispositivos em uma rede se comuniquem entre si e que os dados viajem de forma confi\u00e1vel e precisa atrav\u00e9s da Internet e outras redes baseadas em\u00a0IP.</p>\n<h4>Como funciona?</h4>\n<p>As conex\u00f5es TCP funcionam atrav\u00e9s de um processo chamado de \u201chandshake\u201d de tr\u00eas etapas. O handshake de tr\u00eas etapas \u00e9 um processo que estabelece uma conex\u00e3o entre dois dispositivos em uma rede antes que qualquer dado seja trocado. O processo consiste em tr\u00eas\u00a0etapas:</p>\n<ol>\n<li>O dispositivo iniciador, conhecido como cliente, envia um pacote com a bandeira SYN (sincronizar) para o dispositivo de destino, conhecido como servidor. Este pacote \u00e9 chamado de pacote SYN e serve como uma solicita\u00e7\u00e3o para iniciar uma\u00a0conex\u00e3o.</li>\n<li>O servidor recebe o pacote SYN e responde com um pacote com as bandeiras SYN e ACK (confirmar) configuradas. Este pacote \u00e9 chamado de pacote SYN-ACK e serve como uma confirma\u00e7\u00e3o da solicita\u00e7\u00e3o do cliente para iniciar uma\u00a0conex\u00e3o.</li>\n<li>O cliente recebe o pacote SYN-ACK e envia um pacote com apenas a bandeira ACK configurada. Este pacote \u00e9 chamado de pacote ACK e serve como uma confirma\u00e7\u00e3o final do estabelecimento da\u00a0conex\u00e3o.</li>\n</ol>\n<p>Neste ponto, a conex\u00e3o \u00e9 estabelecida e os dados podem ser trocados entre o cliente e o servidor. Uma vez que a transfer\u00eancia de dados est\u00e1 completa, qualquer lado pode iniciar a finaliza\u00e7\u00e3o da conex\u00e3o, o que \u00e9 feito atrav\u00e9s de um processo semelhante de enviar pacotes com a bandeira FIN (finalizar). Este processo \u00e9 chamado de \u201chandshake\u201d de quatro etapas sendo usado para fechar a\u00a0conex\u00e3o.</p>\n<h4>C\u00f3digo em\u00a0GO</h4>\n<p>Para fazer esse teste de conceito eu crie um simples c\u00f3digo em GO que pode se encontrado <a href=\"https://github.com/rafaelmgr12/simple-tcp-server\">aqui</a>.</p>\n<p>Neste projeto simples, foi desenvolvido um servidor que utiliza o protocolo TCP e fica escutando quando um cliente se conecta. Dessa forma, \u00e9 poss\u00edvel se comunicar com o servidor, enviando e/ou recebendo dados.</p>\n<p>Al\u00e9m disso, devido \u00e0 facilidade de lidar com concorr\u00eancia na linguagem Go, este c\u00f3digo consegue gerenciar eficazmente v\u00e1rios clientes conectados simultaneamente ao nosso servidor.</p>\n<h3><strong>De volta para o\u00a0desafio</strong></h3>\n<p>Com esse tutorial feito podemos modificar para ser poss\u00edvel implementar os requisitos propostos pelo\u00a0desafio.</p>\n<p>Eu dividi o trabalho em algumas partes,\u00a0segue:</p>\n<ol>\n<li>Criar um servidor TCP que escuta na porta especificada por uma vari\u00e1vel de ambiente PORT: Utilize a biblioteca net do Go para criar um servidor TCP que escuta na porta especificada.</li>\n<li>Criar um cliente TCP que se conecta a um servidor: Utilize a biblioteca net do Go para criar um cliente TCP que se conecta ao servidor.</li>\n<li>Gerar um id \u00fanico para cada cliente que se conecta ao servidor: crie um m\u00e9todo para gerar um id \u00fanico para cada cliente que se conecta ao servidor. Envie este id de volta ao cliente quando ele se conectar.</li>\n<li>Implementar a\u00e7\u00f5es esperadas pelo servidor: Para as a\u00e7\u00f5es esperadas pelo servidor, como \u201cLIST\u201d e \u201cRELAY\u201d, implemente as l\u00f3gicas necess\u00e1rias para que o servidor possa processar essas\u00a0a\u00e7\u00f5es.</li>\n<li>Enviar e receber dados entre cliente e servidor: utilize a biblioteca io do Go para enviar e receber dados entre o cliente e o servidor.</li>\n</ol>\n<p>O primeiro passo \u00e9 simples: algumas modifica\u00e7\u00f5es simples no tutorial s\u00e3o necess\u00e1rias, especificamente definir uma vari\u00e1vel de ambiente para a porta do servidor e fazer o mesmo para o cliente. Assim, o primeiro requisito est\u00e1\u00a0pronto.</p>\n<p>Agora, geraremos um ID \u00fanico. Escolhi gerar a partir de um UUID e para isso usei a biblioteca do Google chamada UUID (o link das bibliotecas usadas est\u00e1 no meu reposit\u00f3rio). Em seguida, basta enviar o ID para o cliente quando ele se conectar \u00e0 aplica\u00e7\u00e3o.</p>\n<p>A configura\u00e7\u00e3o de envio e recebimento foi feita com as bibliotecas net e io, bibliotecas padr\u00e3o do Go. Essa parte foi um pouco complicada; o c\u00f3digo precisa ser melhorado para ser mais leg\u00edvel e\u00a0limpo.</p>\n<p>Por \u00faltimo, implementamos os m\u00e9todos \u201cLIST\u201d e \u201cRELAY\u201d. Para ambos, foi necess\u00e1rio usar a estrutura de dados de hashmap para mapear o ID e o endere\u00e7o da conex\u00e3o do cliente. Ent\u00e3o, basta configurar alguns switch case para executar os\u00a0m\u00e9todos.</p>\n<p>Para ter algum m\u00e9todo de autentica\u00e7\u00e3o, tamb\u00e9m implementei um m\u00e9todo simples, onde o cliente precisa enviar o ID gerado pelo servidor de volta para ser poss\u00edvel acessar os m\u00e9todos requisitados.</p>\n<p><strong>Conclus\u00e3o</strong></p>\n<p>\u00c9 a primeira vez que fiz uma implementa\u00e7\u00e3o de um servidor/cliente usando o protocolo TCP. Portanto, tive que pesquisar e estudar sobre o que \u00e9 e definir alguns pontos para come\u00e7ar. Como desenvolvi isso em apenas 3 dias e sem nunca ter visto esse tipo de protocolo, ainda n\u00e3o consegui chegar no padr\u00e3o de qualidade de c\u00f3digo que eu desejo. H\u00e1 alguns problemas de design, mas a refatora\u00e7\u00e3o pode ser feita mais tarde. Esse desafio foi bem dif\u00edcil, j\u00e1 que me tirou da minha zona de conforto, mas acho que foi legal aprender mais sobre redes e protocolos.</p>\n<p>O reposit\u00f3rio do projeto est\u00e1\u00a0aqui:</p>\n<p><a href=\"https://github.com/rafaelmgr12/syscom-tcp\">GitHub - rafaelmgr12/syscom-tcp</a></p>\n<h3>Refer\u00eancias:</h3>\n<p><a href=\"https://www.golinuxcloud.com/golang-tcp-server-client/\">Golang TCP Server and Client Example [Tutorial] | GoLinuxCloud</a></p>\n<p><a href=\"http://www.inanzzz.com/index.php/post/j3n1/creating-a-concurrent-tcp-client-and-server-example-with-golang\">Creating a concurrent TCP client and server example with\u00a0Golang</a></p>\n<p><a href=\"https://www.linode.com/docs/guides/developing-udp-and-tcp-clients-and-servers-in-go/\">Create a TCP and UDP Client and Server using\u00a0Go</a></p>\n<p><a href=\"https://systembash.com/a-simple-go-tcp-server-and-tcp-client/\">A Simple Go TCP Server and TCP\u00a0Client</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bbd36bea7c0b\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["go","tcp"]},{"title":"Como encontrar elementos duplicados em uma Lista?","pubDate":"2022-07-12 11:12:44","link":"https://medium.com/@rgribeiro/como-achar-elementos-duplicados-em-uma-lista-69ead8889a2f?source=rss-303f8669abf9------2","guid":"https://medium.com/p/69ead8889a2f","author":"Rafael Ribeiro","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*GlBRiPadpVQv9xqoLMfU1A.png","description":"\n<p>L\u00f3gica \u00e9 requisito para todo programador, e para continuar me aperfei\u00e7oando, uso algumas plataformas online como a HackerRank e LeetCode. E essas plataformas t\u00eam desafios de programa\u00e7\u00e3o para todos os n\u00edveis. Dessa forma \u00e9 poss\u00edvel treinar l\u00f3gica como tamb\u00e9m estrutura de dados como ferramentas para resolu\u00e7\u00e3o do\u00a0mesmo.</p>\n<h3>Problema</h3>\n<p>Dito isso, durante um exerc\u00edcio achei que seria relevante compartilhar. Num primeiro momento ele parece bem simples. O enunciado \u00e9 o seguinte.</p>\n<blockquote><em>Dado um vetor de inteiros, nums, contendo n+1 inteiros onde cada inteiro est\u00e1 no intervalo [1,n]\u00a0. Existe apenas um n\u00famero repetido em nums, retorne esse n\u00famero\u00a0repetido</em></blockquote>\n<p>As restri\u00e7\u00f5es s\u00e3o</p>\n<ul>\n<li>1\u2264 n\u226410\u2075</li>\n<li>nums.length == n +\u00a01</li>\n<li>1 &lt;= nums[i] &lt;=\u00a0n</li>\n<li>Todos os inteiros em nums aparecem apenas uma vez, exceto precisamente um inteiro que aparece duas ou mais\u00a0vezes.</li>\n</ul>\n<p>A obrigatoriedade de conter um inteiro repetido vem do<strong> Pigeonhole principle</strong>. \u00c9 um princ\u00edpio bem conhecido na matem\u00e1tica, voc\u00eas podem consultar isso facilmente na internet. \u00c9 recomend\u00e1vel olhar a prova, \u00e9 bem interessante como faz alus\u00e3o \u00e0 v\u00e1rios problemas reais.</p>\n<p>Bem, o que dificulta o problema \u00e9 restri\u00e7\u00e3o na solu\u00e7\u00e3o que\u00a0\u00e9:</p>\n<blockquote><em>Voc\u00ea deve resolver o problema sem modificar o vetor nums e usa apenas espa\u00e7o extra constante.</em></blockquote>\n<p>Como pode ser visto essa restri\u00e7\u00e3o torna o problema dif\u00edcil, tendo em vista que n\u00e3o \u00e9 poss\u00edvel usar nenhum estrutura de dados e tamb\u00e9m n\u00e3o \u00e9 poss\u00edvel modificar o vetor\u00a0nums.</p>\n<h3>Solu\u00e7\u00e3o</h3>\n<p>Esse \u00e9 um problema cl\u00e1ssico, com duas solu\u00e7\u00f5es poss\u00edveis. A primeira que usarei, estarei ignorando a restri\u00e7\u00e3o de modifica\u00e7\u00e3o do problema. Essa forma \u00e9 apenas um come\u00e7o para gente pensar em como resolver esse problema.</p>\n<p>Bem, para come\u00e7ar usarei uma abordagem bem simples, mas que resolveria esse problema se n\u00e3o houvesse restri\u00e7\u00e3o na\u00a0solu\u00e7\u00e3o.</p>\n<p>A ideia \u00e9 a seguinte, a primeiro momento nosso vetor tem valores espalhados e n\u00e3o segue uma ordem espec\u00edfica. Mas e se fizessemos a ordena\u00e7\u00e3o desse vetor? Os valores duplicados estariam perto um do\u00a0outro.</p>\n<p>Temos que:</p>\n<ol>\n<li>Ordenar o vetor\u00a0nums;</li>\n<li>Executar um loop para examinar os elementos e se o elemento subsequente for igual ao antecessor temos o valor duplicado;</li>\n<li>Retorna o primeiro n\u00famero que \u00e9 igual ao seu antecessor.</li>\n</ol>\n<p>O c\u00f3digo em python fica da seguinte\u00a0forma:</p>\n<pre>def findDuplicate(nums):<br>        nums.sort()<br>        for i in range(1, len(nums)):<br>            if nums[i] == nums[i-1]:<br>                return nums[i]</pre>\n<p>Essa solu\u00e7\u00e3o j\u00e1 seria suficiente, pois se analisarmos a Complexidade ter\u00edamos o seguinte:</p>\n<ul><li>\n<strong>Complexidade de tempo\u00a0:</strong> O(n log\u00a0n)</li></ul>\n<p>Ordena\u00e7\u00e3o leva O(n log n). E seguindo fazer uma loop linear para avaliar os elementos do vetor assim resultando, O(n log n) + O(n) = O(n log\u00a0n)</p>\n<ul><li>\n<strong>Complexidade no espa\u00e7o</strong>: <em>O(logn)</em> or\u00a0<em>O(n)</em>\n</li></ul>\n<p>A complexidade do espa\u00e7o do algoritmo de ordena\u00e7\u00e3o depende da implementa\u00e7\u00e3o de cada linguagem de programa\u00e7\u00e3o:</p>\n<ul>\n<li>Java, Arrays.sort() \u00e9 implementado usando uma variante do algoritmo Quick Sort, que tem uma complexidade de espa\u00e7o de O(log\u00a0n)</li>\n<li>Em C++, a fun\u00e7\u00e3o sort() fornecida pelo STL usa um h\u00edbrido de Quick Sort, Heap Sort e Insertion Sort, com uma complexidade de espa\u00e7o no pior caso de O(log\u00a0n)</li>\n<li>Em Python, a fun\u00e7\u00e3o sort() \u00e9 implementada usando o algoritmo Timsort, que tem uma complexidade de espa\u00e7o de pior caso de\u00a0O(n)</li>\n</ul>\n<p>A restri\u00e7\u00e3o no espa\u00e7o tamb\u00e9m se tonar um problema, j\u00e1 que poder\u00edamos usar um HashMap para contar valores os valores e armazen\u00e1-los. Assim temos que pensar um pouco mais para assim conseguir pensar numa solu\u00e7\u00e3o que siga essa restri\u00e7\u00e3o.</p>\n<h3>Detec\u00e7\u00e3o C\u00edclica</h3>\n<p>Podemos usar um algoritmo de detec\u00e7\u00e3o c\u00edclica. A ide\u00e1 \u00e9 pensar que esse vetor possar ser tratado como uma lista encadeada e como temos um valor repetido esse valor far\u00e1 a lista conter um ciclo. Pode ser observado na figura abaixo a\u00a0ideia.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GlBRiPadpVQv9xqoLMfU1A.png\"></figure><p>Como pode ser visto o valor duplicado em nosso vetor se tornar a entrada em nosso ciclo. A ideia \u00e9 reduzir esse problema a <a href=\"https://www.hackerrank.com/challenges/detect-whether-a-linked-list-contains-a-cycle/problem\">Cycle Detection</a> ou <a href=\"https://leetcode.com/problems/linked-list-cycle-ii/solution/\">Linked List Cycle\u00a0II</a>.</p>\n<p>Podemos aumentar o tamanho do vetor nums para ilustrar melhor nosso problema.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oxz5lWqerwMRdDqIcSi36Q.png\"></figure><h3>Floyd\u2019s Hare and\u00a0Tortoise</h3>\n<p>\u00c9 um algoritmo de ponteiro que usa apenas dois ponteiros, que se movem pela sequ\u00eancia em velocidades diferentes. Tamb\u00e9m \u00e9 chamado de \u201calgoritmo da tartaruga e da lebre\u201d, aludindo \u00e0 f\u00e1bula de Esopo, A tartaruga e a\u00a0lebre.</p>\n<p>Para entender de maneira clara dividiremos o procedimento em duas partes. Assim, trazendo ela para o nosso problema tem o seguinte.</p>\n<p><strong>Primeira Fase:</strong></p>\n<p>hare = nums[nums[hare]] \u00e9 duas vezes mais r\u00e1pido que tortoise = nums[tortoise]. Como a lebre anda r\u00e1pido, seria a primeira a entrar no ciclo e correr ao redor do ciclo. Em algum momento, a tartaruga tamb\u00e9m entra no ciclo e, como est\u00e1 se movendo mais devagar, a lebre alcan\u00e7a a tartaruga em algum ponto de interse\u00e7\u00e3o. Agora a fase 1 acabou e a tartaruga perdeu.</p>\n<blockquote><em>Observe que o ponto de interse\u00e7\u00e3o n\u00e3o \u00e9 a entrada do ciclo no caso\u00a0geral.</em></blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OYJE40t-qH22Of2_.png\"></figure><p>\u00c9 poss\u00edvel calcular a interse\u00e7\u00e3o, basta notar que a lebre(hare) percorreu o dobro da tartaruga(tortoise), ou seja, 2d(tortoise) =\u00a0d(hare):</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/211/0*tWsxGp0z0MuS8gM1\"></figure><p>Onde n \u00e9 um n\u00famero inteiro. \u00c9 importante notar que esse passo \u00e9 crucial e prova que algoritmo de Floyd funciona. Visto que estamos calculando a dist\u00e2ncia do primeiro elemento da lista at\u00e9 o ponto da interse\u00e7\u00e3o, essa conta se tonar algo indispens\u00e1vel para implementar a pr\u00f3xima fase do algoritmo.</p>\n<p><strong>Segunda Fase:</strong></p>\n<p>Nessa fase daremos a tartaruga uma segunda chance, ou seja, diminuiremos a velocidade da lebre, de modo que agora ela se mova na velocidade da tartaruga: tortoise = nums[tortoise]\u00a0,hare = nums[hare]. A tartaruga est\u00e1 de volta \u00e0 posi\u00e7\u00e3o inicial e a lebre parte do ponto de interse\u00e7\u00e3o.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*p2uHTOH37bK6ma7QKYdw9w.png\"></figure><p>Mostraremos que desta vez eles se encontram na entrada do ciclo ap\u00f3s F\u00a0passos.</p>\n<ul>\n<li>A tartaruga come\u00e7ou em zero, ent\u00e3o sua posi\u00e7\u00e3o ap\u00f3s o F passos \u00e9\u00a0F.</li>\n<li>A lebre come\u00e7ou no ponto de interse\u00e7\u00e3o F + a = nC, ent\u00e3o sua posi\u00e7\u00e3o ap\u00f3s F passos \u00e9 nC+F, o mesmo ponto que\u00a0F.</li>\n<li>Assim, a tartaruga e a lebre (desacelerada) se encontrar\u00e3o na entrada do\u00a0ciclo.</li>\n</ul>\n<p>A imagem abaixo mostra o que acontece durante todas as\u00a0fases.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/1*09n9E-RUgjCd6uIRzue7Gg.gif\"></figure><p>O c\u00f3digo em python \u00e9 escrito da seguinte\u00a0forma:</p>\n<pre>def findDuplicate(nums):<br>        # Ache o ponto de interse\u00e7\u00e3o dos ponteiros<br>        tortoise = hare = nums[0]<br>        while True:<br>            tortoise = nums[tortoise]<br>            hare = nums[nums[hare]]<br>            if tortoise == hare:<br>                break<br><br>        # Ache o a entrada dentro do ciclo.<br>        tortoise = nums[0]<br>        while tortoise != hare:<br>            tortoise = nums[tortoise]<br>            hare = nums[hare]<br><br>        return hare</pre>\n<ul>\n<li>\n<strong>Complexidade de tempo:</strong>\u00a0O(n)</li>\n<li>\n<strong>Complexidade no espa\u00e7o</strong>:\u00a0<em>O(1)</em>\n</li>\n</ul>\n<p>Aplicando esse m\u00e9todo temos uma solu\u00e7\u00e3o bem elegante e otimizada do nosso problema. Essa categoria de problema \u00e9 aquela que se torna trivial quando se resolve, mas num primeiro momento n\u00e3o \u00e9 intuitivo reduzi-lo em um problema de listas encadeada c\u00edclicas.</p>\n<p>Se houver d\u00favida ainda, \u00e9 poss\u00edvel printar no console os valores dos ponteiros tortoise e hare, para melhorar a visualiza\u00e7\u00e3o.</p>\n<h3>Referencias</h3>\n<ul>\n<li>Explica\u00e7\u00e3o em video pode ser vista\u00a0<a href=\"https://www.youtube.com/watch?v=wjYnzkAhcNk\">aqui</a>.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cycle_detection\">Wikipedia</a></li>\n<li>Problema pode se encontrado <a href=\"https://leetcode.com/problems/find-the-duplicate-number/\">aqui</a>.</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=69ead8889a2f\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>L\u00f3gica \u00e9 requisito para todo programador, e para continuar me aperfei\u00e7oando, uso algumas plataformas online como a HackerRank e LeetCode. E essas plataformas t\u00eam desafios de programa\u00e7\u00e3o para todos os n\u00edveis. Dessa forma \u00e9 poss\u00edvel treinar l\u00f3gica como tamb\u00e9m estrutura de dados como ferramentas para resolu\u00e7\u00e3o do\u00a0mesmo.</p>\n<h3>Problema</h3>\n<p>Dito isso, durante um exerc\u00edcio achei que seria relevante compartilhar. Num primeiro momento ele parece bem simples. O enunciado \u00e9 o seguinte.</p>\n<blockquote><em>Dado um vetor de inteiros, nums, contendo n+1 inteiros onde cada inteiro est\u00e1 no intervalo [1,n]\u00a0. Existe apenas um n\u00famero repetido em nums, retorne esse n\u00famero\u00a0repetido</em></blockquote>\n<p>As restri\u00e7\u00f5es s\u00e3o</p>\n<ul>\n<li>1\u2264 n\u226410\u2075</li>\n<li>nums.length == n +\u00a01</li>\n<li>1 &lt;= nums[i] &lt;=\u00a0n</li>\n<li>Todos os inteiros em nums aparecem apenas uma vez, exceto precisamente um inteiro que aparece duas ou mais\u00a0vezes.</li>\n</ul>\n<p>A obrigatoriedade de conter um inteiro repetido vem do<strong> Pigeonhole principle</strong>. \u00c9 um princ\u00edpio bem conhecido na matem\u00e1tica, voc\u00eas podem consultar isso facilmente na internet. \u00c9 recomend\u00e1vel olhar a prova, \u00e9 bem interessante como faz alus\u00e3o \u00e0 v\u00e1rios problemas reais.</p>\n<p>Bem, o que dificulta o problema \u00e9 restri\u00e7\u00e3o na solu\u00e7\u00e3o que\u00a0\u00e9:</p>\n<blockquote><em>Voc\u00ea deve resolver o problema sem modificar o vetor nums e usa apenas espa\u00e7o extra constante.</em></blockquote>\n<p>Como pode ser visto essa restri\u00e7\u00e3o torna o problema dif\u00edcil, tendo em vista que n\u00e3o \u00e9 poss\u00edvel usar nenhum estrutura de dados e tamb\u00e9m n\u00e3o \u00e9 poss\u00edvel modificar o vetor\u00a0nums.</p>\n<h3>Solu\u00e7\u00e3o</h3>\n<p>Esse \u00e9 um problema cl\u00e1ssico, com duas solu\u00e7\u00f5es poss\u00edveis. A primeira que usarei, estarei ignorando a restri\u00e7\u00e3o de modifica\u00e7\u00e3o do problema. Essa forma \u00e9 apenas um come\u00e7o para gente pensar em como resolver esse problema.</p>\n<p>Bem, para come\u00e7ar usarei uma abordagem bem simples, mas que resolveria esse problema se n\u00e3o houvesse restri\u00e7\u00e3o na\u00a0solu\u00e7\u00e3o.</p>\n<p>A ideia \u00e9 a seguinte, a primeiro momento nosso vetor tem valores espalhados e n\u00e3o segue uma ordem espec\u00edfica. Mas e se fizessemos a ordena\u00e7\u00e3o desse vetor? Os valores duplicados estariam perto um do\u00a0outro.</p>\n<p>Temos que:</p>\n<ol>\n<li>Ordenar o vetor\u00a0nums;</li>\n<li>Executar um loop para examinar os elementos e se o elemento subsequente for igual ao antecessor temos o valor duplicado;</li>\n<li>Retorna o primeiro n\u00famero que \u00e9 igual ao seu antecessor.</li>\n</ol>\n<p>O c\u00f3digo em python fica da seguinte\u00a0forma:</p>\n<pre>def findDuplicate(nums):<br>        nums.sort()<br>        for i in range(1, len(nums)):<br>            if nums[i] == nums[i-1]:<br>                return nums[i]</pre>\n<p>Essa solu\u00e7\u00e3o j\u00e1 seria suficiente, pois se analisarmos a Complexidade ter\u00edamos o seguinte:</p>\n<ul><li>\n<strong>Complexidade de tempo\u00a0:</strong> O(n log\u00a0n)</li></ul>\n<p>Ordena\u00e7\u00e3o leva O(n log n). E seguindo fazer uma loop linear para avaliar os elementos do vetor assim resultando, O(n log n) + O(n) = O(n log\u00a0n)</p>\n<ul><li>\n<strong>Complexidade no espa\u00e7o</strong>: <em>O(logn)</em> or\u00a0<em>O(n)</em>\n</li></ul>\n<p>A complexidade do espa\u00e7o do algoritmo de ordena\u00e7\u00e3o depende da implementa\u00e7\u00e3o de cada linguagem de programa\u00e7\u00e3o:</p>\n<ul>\n<li>Java, Arrays.sort() \u00e9 implementado usando uma variante do algoritmo Quick Sort, que tem uma complexidade de espa\u00e7o de O(log\u00a0n)</li>\n<li>Em C++, a fun\u00e7\u00e3o sort() fornecida pelo STL usa um h\u00edbrido de Quick Sort, Heap Sort e Insertion Sort, com uma complexidade de espa\u00e7o no pior caso de O(log\u00a0n)</li>\n<li>Em Python, a fun\u00e7\u00e3o sort() \u00e9 implementada usando o algoritmo Timsort, que tem uma complexidade de espa\u00e7o de pior caso de\u00a0O(n)</li>\n</ul>\n<p>A restri\u00e7\u00e3o no espa\u00e7o tamb\u00e9m se tonar um problema, j\u00e1 que poder\u00edamos usar um HashMap para contar valores os valores e armazen\u00e1-los. Assim temos que pensar um pouco mais para assim conseguir pensar numa solu\u00e7\u00e3o que siga essa restri\u00e7\u00e3o.</p>\n<h3>Detec\u00e7\u00e3o C\u00edclica</h3>\n<p>Podemos usar um algoritmo de detec\u00e7\u00e3o c\u00edclica. A ide\u00e1 \u00e9 pensar que esse vetor possar ser tratado como uma lista encadeada e como temos um valor repetido esse valor far\u00e1 a lista conter um ciclo. Pode ser observado na figura abaixo a\u00a0ideia.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GlBRiPadpVQv9xqoLMfU1A.png\"></figure><p>Como pode ser visto o valor duplicado em nosso vetor se tornar a entrada em nosso ciclo. A ideia \u00e9 reduzir esse problema a <a href=\"https://www.hackerrank.com/challenges/detect-whether-a-linked-list-contains-a-cycle/problem\">Cycle Detection</a> ou <a href=\"https://leetcode.com/problems/linked-list-cycle-ii/solution/\">Linked List Cycle\u00a0II</a>.</p>\n<p>Podemos aumentar o tamanho do vetor nums para ilustrar melhor nosso problema.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oxz5lWqerwMRdDqIcSi36Q.png\"></figure><h3>Floyd\u2019s Hare and\u00a0Tortoise</h3>\n<p>\u00c9 um algoritmo de ponteiro que usa apenas dois ponteiros, que se movem pela sequ\u00eancia em velocidades diferentes. Tamb\u00e9m \u00e9 chamado de \u201calgoritmo da tartaruga e da lebre\u201d, aludindo \u00e0 f\u00e1bula de Esopo, A tartaruga e a\u00a0lebre.</p>\n<p>Para entender de maneira clara dividiremos o procedimento em duas partes. Assim, trazendo ela para o nosso problema tem o seguinte.</p>\n<p><strong>Primeira Fase:</strong></p>\n<p>hare = nums[nums[hare]] \u00e9 duas vezes mais r\u00e1pido que tortoise = nums[tortoise]. Como a lebre anda r\u00e1pido, seria a primeira a entrar no ciclo e correr ao redor do ciclo. Em algum momento, a tartaruga tamb\u00e9m entra no ciclo e, como est\u00e1 se movendo mais devagar, a lebre alcan\u00e7a a tartaruga em algum ponto de interse\u00e7\u00e3o. Agora a fase 1 acabou e a tartaruga perdeu.</p>\n<blockquote><em>Observe que o ponto de interse\u00e7\u00e3o n\u00e3o \u00e9 a entrada do ciclo no caso\u00a0geral.</em></blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OYJE40t-qH22Of2_.png\"></figure><p>\u00c9 poss\u00edvel calcular a interse\u00e7\u00e3o, basta notar que a lebre(hare) percorreu o dobro da tartaruga(tortoise), ou seja, 2d(tortoise) =\u00a0d(hare):</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/211/0*tWsxGp0z0MuS8gM1\"></figure><p>Onde n \u00e9 um n\u00famero inteiro. \u00c9 importante notar que esse passo \u00e9 crucial e prova que algoritmo de Floyd funciona. Visto que estamos calculando a dist\u00e2ncia do primeiro elemento da lista at\u00e9 o ponto da interse\u00e7\u00e3o, essa conta se tonar algo indispens\u00e1vel para implementar a pr\u00f3xima fase do algoritmo.</p>\n<p><strong>Segunda Fase:</strong></p>\n<p>Nessa fase daremos a tartaruga uma segunda chance, ou seja, diminuiremos a velocidade da lebre, de modo que agora ela se mova na velocidade da tartaruga: tortoise = nums[tortoise]\u00a0,hare = nums[hare]. A tartaruga est\u00e1 de volta \u00e0 posi\u00e7\u00e3o inicial e a lebre parte do ponto de interse\u00e7\u00e3o.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*p2uHTOH37bK6ma7QKYdw9w.png\"></figure><p>Mostraremos que desta vez eles se encontram na entrada do ciclo ap\u00f3s F\u00a0passos.</p>\n<ul>\n<li>A tartaruga come\u00e7ou em zero, ent\u00e3o sua posi\u00e7\u00e3o ap\u00f3s o F passos \u00e9\u00a0F.</li>\n<li>A lebre come\u00e7ou no ponto de interse\u00e7\u00e3o F + a = nC, ent\u00e3o sua posi\u00e7\u00e3o ap\u00f3s F passos \u00e9 nC+F, o mesmo ponto que\u00a0F.</li>\n<li>Assim, a tartaruga e a lebre (desacelerada) se encontrar\u00e3o na entrada do\u00a0ciclo.</li>\n</ul>\n<p>A imagem abaixo mostra o que acontece durante todas as\u00a0fases.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/500/1*09n9E-RUgjCd6uIRzue7Gg.gif\"></figure><p>O c\u00f3digo em python \u00e9 escrito da seguinte\u00a0forma:</p>\n<pre>def findDuplicate(nums):<br>        # Ache o ponto de interse\u00e7\u00e3o dos ponteiros<br>        tortoise = hare = nums[0]<br>        while True:<br>            tortoise = nums[tortoise]<br>            hare = nums[nums[hare]]<br>            if tortoise == hare:<br>                break<br><br>        # Ache o a entrada dentro do ciclo.<br>        tortoise = nums[0]<br>        while tortoise != hare:<br>            tortoise = nums[tortoise]<br>            hare = nums[hare]<br><br>        return hare</pre>\n<ul>\n<li>\n<strong>Complexidade de tempo:</strong>\u00a0O(n)</li>\n<li>\n<strong>Complexidade no espa\u00e7o</strong>:\u00a0<em>O(1)</em>\n</li>\n</ul>\n<p>Aplicando esse m\u00e9todo temos uma solu\u00e7\u00e3o bem elegante e otimizada do nosso problema. Essa categoria de problema \u00e9 aquela que se torna trivial quando se resolve, mas num primeiro momento n\u00e3o \u00e9 intuitivo reduzi-lo em um problema de listas encadeada c\u00edclicas.</p>\n<p>Se houver d\u00favida ainda, \u00e9 poss\u00edvel printar no console os valores dos ponteiros tortoise e hare, para melhorar a visualiza\u00e7\u00e3o.</p>\n<h3>Referencias</h3>\n<ul>\n<li>Explica\u00e7\u00e3o em video pode ser vista\u00a0<a href=\"https://www.youtube.com/watch?v=wjYnzkAhcNk\">aqui</a>.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cycle_detection\">Wikipedia</a></li>\n<li>Problema pode se encontrado <a href=\"https://leetcode.com/problems/find-the-duplicate-number/\">aqui</a>.</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=69ead8889a2f\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["leetcode","algorithms"]}]}